
C:\temp\mpp_dummy\cv1\Debug\cv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000390  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  08000390  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000846  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000001d7  00000000  00000000  00010c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000070  00000000  00000000  00010de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00010e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000003be  00000000  00000000  00010e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000036d  00000000  00000000  00011256  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000115c3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000b0  00000000  00000000  00011644  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000116f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000370 	.word	0x08000370

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000370 	.word	0x08000370

080001d8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
  int i = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
  if (!(RCC->AHB1ENR & RCC_AHB1ENR_GPIOAEN))   // nejsou povoleny hodiny ?
 80001e2:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <main+0x80>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e6:	f003 0301 	and.w	r3, r3, #1
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d111      	bne.n	8000212 <main+0x3a>
  {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;       // povolit hodiny periferie
 80001ee:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <main+0x80>)
 80001f0:	4b19      	ldr	r3, [pc, #100]	; (8000258 <main+0x80>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOARST;    // proved reset periferie
 80001fa:	4a17      	ldr	r2, [pc, #92]	; (8000258 <main+0x80>)
 80001fc:	4b16      	ldr	r3, [pc, #88]	; (8000258 <main+0x80>)
 80001fe:	691b      	ldr	r3, [r3, #16]
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~RCC_AHB1RSTR_GPIOARST;   // a konec resetu
 8000206:	4a14      	ldr	r2, [pc, #80]	; (8000258 <main+0x80>)
 8000208:	4b13      	ldr	r3, [pc, #76]	; (8000258 <main+0x80>)
 800020a:	691b      	ldr	r3, [r3, #16]
 800020c:	f023 0301 	bic.w	r3, r3, #1
 8000210:	6113      	str	r3, [r2, #16]
  }

  GPIOA->MODER |= 0x01 << (5 * 2);    // kazde 2 bity v registru = jeden vystup
 8000212:	4a12      	ldr	r2, [pc, #72]	; (800025c <main+0x84>)
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <main+0x84>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021c:	6013      	str	r3, [r2, #0]
                                      // kombinace 01 = output
  GPIOA->OTYPER &= ~(1 << 5);         // jeden bit = jeden vystup, log. 0 = push-pull
 800021e:	4a0f      	ldr	r2, [pc, #60]	; (800025c <main+0x84>)
 8000220:	4b0e      	ldr	r3, [pc, #56]	; (800025c <main+0x84>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	f023 0320 	bic.w	r3, r3, #32
 8000228:	6053      	str	r3, [r2, #4]
  GPIOA->OSPEEDR |= 0x03 << (5 * 2);  // kombinace 11 = high-speed
 800022a:	4a0c      	ldr	r2, [pc, #48]	; (800025c <main+0x84>)
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x84>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000234:	6093      	str	r3, [r2, #8]

  /* Infinite loop */
  while (1)
  {
    GPIOA->ODR ^= 1 << 5;             // vystupni registr - 1 bit = 1 vystup, operace XOR
 8000236:	4a09      	ldr	r2, [pc, #36]	; (800025c <main+0x84>)
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <main+0x84>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	f083 0320 	eor.w	r3, r3, #32
 8000240:	6153      	str	r3, [r2, #20]

    for(i = 0; i < 500000; i++)
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e002      	b.n	800024e <main+0x76>
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a03      	ldr	r2, [pc, #12]	; (8000260 <main+0x88>)
 8000252:	4293      	cmp	r3, r2
 8000254:	ddf8      	ble.n	8000248 <main+0x70>
      ;
  }
 8000256:	e7ee      	b.n	8000236 <main+0x5e>
 8000258:	40023800 	.word	0x40023800
 800025c:	40020000 	.word	0x40020000
 8000260:	0007a11f 	.word	0x0007a11f

08000264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800029c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800026a:	e003      	b.n	8000274 <LoopCopyDataInit>

0800026c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800026e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000272:	3104      	adds	r1, #4

08000274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000274:	480b      	ldr	r0, [pc, #44]	; (80002a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800027a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800027c:	d3f6      	bcc.n	800026c <CopyDataInit>
  ldr  r2, =_sbss
 800027e:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000280:	e002      	b.n	8000288 <LoopFillZerobss>

08000282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000284:	f842 3b04 	str.w	r3, [r2], #4

08000288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800028a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800028c:	d3f9      	bcc.n	8000282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800028e:	f000 f813 	bl	80002b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000292:	f000 f847 	bl	8000324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000296:	f7ff ff9f 	bl	80001d8 <main>
  bx  lr    
 800029a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800029c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002a0:	08000390 	.word	0x08000390
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002a8:	20000000 	.word	0x20000000
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC_IRQHandler>
	...

080002b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002bc:	4a16      	ldr	r2, [pc, #88]	; (8000318 <SystemInit+0x60>)
 80002be:	4b16      	ldr	r3, [pc, #88]	; (8000318 <SystemInit+0x60>)
 80002c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002cc:	4a13      	ldr	r2, [pc, #76]	; (800031c <SystemInit+0x64>)
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <SystemInit+0x64>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <SystemInit+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002de:	4a0f      	ldr	r2, [pc, #60]	; (800031c <SystemInit+0x64>)
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <SystemInit+0x64>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <SystemInit+0x64>)
 80002f0:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <SystemInit+0x68>)
 80002f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <SystemInit+0x64>)
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <SystemInit+0x64>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <SystemInit+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <SystemInit+0x60>)
 8000308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800030c:	609a      	str	r2, [r3, #8]
#endif
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000ed00 	.word	0xe000ed00
 800031c:	40023800 	.word	0x40023800
 8000320:	24003010 	.word	0x24003010

08000324 <__libc_init_array>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <__libc_init_array+0x3c>)
 8000328:	4c0e      	ldr	r4, [pc, #56]	; (8000364 <__libc_init_array+0x40>)
 800032a:	1ae4      	subs	r4, r4, r3
 800032c:	10a4      	asrs	r4, r4, #2
 800032e:	2500      	movs	r5, #0
 8000330:	461e      	mov	r6, r3
 8000332:	42a5      	cmp	r5, r4
 8000334:	d004      	beq.n	8000340 <__libc_init_array+0x1c>
 8000336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800033a:	4798      	blx	r3
 800033c:	3501      	adds	r5, #1
 800033e:	e7f8      	b.n	8000332 <__libc_init_array+0xe>
 8000340:	f000 f816 	bl	8000370 <_init>
 8000344:	4c08      	ldr	r4, [pc, #32]	; (8000368 <__libc_init_array+0x44>)
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <__libc_init_array+0x48>)
 8000348:	1ae4      	subs	r4, r4, r3
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	2500      	movs	r5, #0
 800034e:	461e      	mov	r6, r3
 8000350:	42a5      	cmp	r5, r4
 8000352:	d004      	beq.n	800035e <__libc_init_array+0x3a>
 8000354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000358:	4798      	blx	r3
 800035a:	3501      	adds	r5, #1
 800035c:	e7f8      	b.n	8000350 <__libc_init_array+0x2c>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	0800038c 	.word	0x0800038c
 800036c:	08000388 	.word	0x08000388

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
