
/media/petr/HDD/Atollic_Workspace/TIM3/Debug/TIM3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000554  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006ec  080006ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080006ec  080006ec  000106ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006f0  080006f0  000106f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080006f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  080006f8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000024  080006f8  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000114b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003d1  00000000  00000000  0002117f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000b8  00000000  00000000  00021550  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00021608  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000062b  00000000  00000000  00021688  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000008b6  00000000  00000000  00021cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00022569  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000001a8  00000000  00000000  000225e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00022790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080006d4 	.word	0x080006d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080006d4 	.word	0x080006d4

080001d8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80001e2:	4909      	ldr	r1, [pc, #36]	; (8000208 <NVIC_EnableIRQ+0x30>)
 80001e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e8:	095b      	lsrs	r3, r3, #5
 80001ea:	79fa      	ldrb	r2, [r7, #7]
 80001ec:	f002 021f 	and.w	r2, r2, #31
 80001f0:	2001      	movs	r0, #1
 80001f2:	fa00 f202 	lsl.w	r2, r0, r2
 80001f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	e000e100 	.word	0xe000e100

0800020c <TIM3_IRQHandler>:
/* Private functions */

volatile bool tim3irq = false;

void TIM3_IRQHandler(void) // obsluha preruseni od TIM3
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  TIM3->SR &= ~TIM_SR_UIF; // shodit priznak !!
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <TIM3_IRQHandler+0x20>)
 8000212:	4b06      	ldr	r3, [pc, #24]	; (800022c <TIM3_IRQHandler+0x20>)
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	f023 0301 	bic.w	r3, r3, #1
 800021a:	6113      	str	r3, [r2, #16]
  tim3irq = true;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <TIM3_IRQHandler+0x24>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]
}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	40000400 	.word	0x40000400
 8000230:	20000020 	.word	0x20000020

08000234 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  if (!(RCC->APB1ENR & RCC_APB1ENR_TIM3EN))
 8000238:	4b23      	ldr	r3, [pc, #140]	; (80002c8 <main+0x94>)
 800023a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800023c:	f003 0302 	and.w	r3, r3, #2
 8000240:	2b00      	cmp	r3, #0
 8000242:	d111      	bne.n	8000268 <main+0x34>
  {
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000244:	4a20      	ldr	r2, [pc, #128]	; (80002c8 <main+0x94>)
 8000246:	4b20      	ldr	r3, [pc, #128]	; (80002c8 <main+0x94>)
 8000248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB1RSTR |= RCC_APB1RSTR_TIM3RST;
 8000250:	4a1d      	ldr	r2, [pc, #116]	; (80002c8 <main+0x94>)
 8000252:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <main+0x94>)
 8000254:	6a1b      	ldr	r3, [r3, #32]
 8000256:	f043 0302 	orr.w	r3, r3, #2
 800025a:	6213      	str	r3, [r2, #32]
    RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM3RST;
 800025c:	4a1a      	ldr	r2, [pc, #104]	; (80002c8 <main+0x94>)
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <main+0x94>)
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f023 0302 	bic.w	r3, r3, #2
 8000266:	6213      	str	r3, [r2, #32]
  }

  TIM3->CR1 = TIM_CR1_DIR; // DIR = 1 = cnt-down, ostatni v 0
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <main+0x98>)
 800026a:	2210      	movs	r2, #16
 800026c:	601a      	str	r2, [r3, #0]
  TIM3->CR2 = 0;
 800026e:	4b17      	ldr	r3, [pc, #92]	; (80002cc <main+0x98>)
 8000270:	2200      	movs	r2, #0
 8000272:	605a      	str	r2, [r3, #4]
  TIM3->PSC = SystemCoreClock / 1000 - 1; // 1ms = 1kHz
 8000274:	4a15      	ldr	r2, [pc, #84]	; (80002cc <main+0x98>)
 8000276:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <main+0x9c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4916      	ldr	r1, [pc, #88]	; (80002d4 <main+0xa0>)
 800027c:	fba1 1303 	umull	r1, r3, r1, r3
 8000280:	099b      	lsrs	r3, r3, #6
 8000282:	3b01      	subs	r3, #1
 8000284:	6293      	str	r3, [r2, #40]	; 0x28
  TIM3->ARR = 99; // (100 - 1) - tj. 10Hz, 100ms
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <main+0x98>)
 8000288:	2263      	movs	r2, #99	; 0x63
 800028a:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM3->DIER = TIM_DIER_UIE;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <main+0x98>)
 800028e:	2201      	movs	r2, #1
 8000290:	60da      	str	r2, [r3, #12]
  TIM3->CR1 |= TIM_CR1_CEN; // CEN = 1 = enable
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <main+0x98>)
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <main+0x98>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6013      	str	r3, [r2, #0]

  NVIC_EnableIRQ(TIM3_IRQn);
 800029e:	201d      	movs	r0, #29
 80002a0:	f7ff ff9a 	bl	80001d8 <NVIC_EnableIRQ>
  Nucleo_SetPinGPIO(RGB_BLUE, ioPortOutputPP);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2109      	movs	r1, #9
 80002a8:	480b      	ldr	r0, [pc, #44]	; (80002d8 <main+0xa4>)
 80002aa:	f000 f843 	bl	8000334 <Nucleo_SetPinGPIO>
  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
  {
    if (tim3irq) // priznak ze doslo k preteceni
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <main+0xa8>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0fa      	beq.n	80002ae <main+0x7a>
    {
    tim3irq = false; // shodit
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <main+0xa8>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
    GPIOToggle(RGB_BLUE);
 80002be:	2109      	movs	r1, #9
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <main+0xa4>)
 80002c2:	f000 f999 	bl	80005f8 <GPIOToggle>
    if (tim3irq) // priznak ze doslo k preteceni
 80002c6:	e7f2      	b.n	80002ae <main+0x7a>
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40000400 	.word	0x40000400
 80002d0:	20000000 	.word	0x20000000
 80002d4:	10624dd3 	.word	0x10624dd3
 80002d8:	40020000 	.word	0x40020000
 80002dc:	20000020 	.word	0x20000020

080002e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002e6:	e003      	b.n	80002f0 <LoopCopyDataInit>

080002e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ee:	3104      	adds	r1, #4

080002f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002f8:	d3f6      	bcc.n	80002e8 <CopyDataInit>
  ldr  r2, =_sbss
 80002fa:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002fc:	e002      	b.n	8000304 <LoopFillZerobss>

080002fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000300:	f842 3b04 	str.w	r3, [r2], #4

08000304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000308:	d3f9      	bcc.n	80002fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800030a:	f000 f989 	bl	8000620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030e:	f000 f9bd 	bl	800068c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000312:	f7ff ff8f 	bl	8000234 <main>
  bx  lr    
 8000316:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000318:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800031c:	080006f4 	.word	0x080006f4
  ldr  r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000324:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000328:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800032c:	20000024 	.word	0x20000024

08000330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC_IRQHandler>
	...

08000334 <Nucleo_SetPinGPIO>:


#include "stm_core.h"

bool Nucleo_SetPinGPIO(GPIO_TypeDef *gpio, uint32_t bitnum, eIoPortModes mode)
{
 8000334:	b480      	push	{r7}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	4613      	mov	r3, r2
 8000340:	71fb      	strb	r3, [r7, #7]
  uint32_t enr_mask = 0;        // hodnota do xxENR registru
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
  uint32_t rstr_mask = 0;       // hodnota do xxRSTR registru
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]

  switch((uint32_t)gpio)    // detekce, ktery GPIO
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4aa3      	ldr	r2, [pc, #652]	; (80005dc <Nucleo_SetPinGPIO+0x2a8>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d01d      	beq.n	800038e <Nucleo_SetPinGPIO+0x5a>
 8000352:	4aa2      	ldr	r2, [pc, #648]	; (80005dc <Nucleo_SetPinGPIO+0x2a8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d806      	bhi.n	8000366 <Nucleo_SetPinGPIO+0x32>
 8000358:	4aa1      	ldr	r2, [pc, #644]	; (80005e0 <Nucleo_SetPinGPIO+0x2ac>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d00d      	beq.n	800037a <Nucleo_SetPinGPIO+0x46>
 800035e:	4aa1      	ldr	r2, [pc, #644]	; (80005e4 <Nucleo_SetPinGPIO+0x2b0>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d00f      	beq.n	8000384 <Nucleo_SetPinGPIO+0x50>
 8000364:	e027      	b.n	80003b6 <Nucleo_SetPinGPIO+0x82>
 8000366:	4aa0      	ldr	r2, [pc, #640]	; (80005e8 <Nucleo_SetPinGPIO+0x2b4>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d01a      	beq.n	80003a2 <Nucleo_SetPinGPIO+0x6e>
 800036c:	4a9f      	ldr	r2, [pc, #636]	; (80005ec <Nucleo_SetPinGPIO+0x2b8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d01c      	beq.n	80003ac <Nucleo_SetPinGPIO+0x78>
 8000372:	4a9f      	ldr	r2, [pc, #636]	; (80005f0 <Nucleo_SetPinGPIO+0x2bc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d00f      	beq.n	8000398 <Nucleo_SetPinGPIO+0x64>
 8000378:	e01d      	b.n	80003b6 <Nucleo_SetPinGPIO+0x82>
  {
    case (uint32_t)GPIOA:
      enr_mask = RCC_AHB1ENR_GPIOAEN;
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOARST;
 800037e:	2301      	movs	r3, #1
 8000380:	613b      	str	r3, [r7, #16]
      break;
 8000382:	e018      	b.n	80003b6 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOB:
      enr_mask = RCC_AHB1ENR_GPIOBEN;
 8000384:	2302      	movs	r3, #2
 8000386:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOBRST;
 8000388:	2302      	movs	r3, #2
 800038a:	613b      	str	r3, [r7, #16]
      break;
 800038c:	e013      	b.n	80003b6 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOC:
        enr_mask = RCC_AHB1ENR_GPIOCEN;
 800038e:	2304      	movs	r3, #4
 8000390:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOCRST;
 8000392:	2304      	movs	r3, #4
 8000394:	613b      	str	r3, [r7, #16]
        break;
 8000396:	e00e      	b.n	80003b6 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOD:
        enr_mask = RCC_AHB1ENR_GPIODEN;
 8000398:	2308      	movs	r3, #8
 800039a:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIODRST;
 800039c:	2308      	movs	r3, #8
 800039e:	613b      	str	r3, [r7, #16]
        break;
 80003a0:	e009      	b.n	80003b6 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOE:
        enr_mask = RCC_AHB1ENR_GPIOEEN;
 80003a2:	2310      	movs	r3, #16
 80003a4:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOERST;
 80003a6:	2310      	movs	r3, #16
 80003a8:	613b      	str	r3, [r7, #16]
        break;
 80003aa:	e004      	b.n	80003b6 <Nucleo_SetPinGPIO+0x82>
        enr_mask = RCC_AHB1ENR_GPIOGEN;
        rstr_mask = RCC_AHB1RSTR_GPIOGRST;
        break;
#endif
    case (uint32_t)GPIOH:
        enr_mask = RCC_AHB1ENR_GPIOHEN;
 80003ac:	2380      	movs	r3, #128	; 0x80
 80003ae:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOHRST;
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	613b      	str	r3, [r7, #16]
        break;
 80003b4:	bf00      	nop
  }

  if ((enr_mask == 0) || (rstr_mask == 0))    // nevybran GPIO
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <Nucleo_SetPinGPIO+0x8e>
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d101      	bne.n	80003c6 <Nucleo_SetPinGPIO+0x92>
      return false;                           // vrat priznak chyby
 80003c2:	2300      	movs	r3, #0
 80003c4:	e104      	b.n	80005d0 <Nucleo_SetPinGPIO+0x29c>


  if (!(RCC->AHB1ENR & enr_mask))             // inicializace vybraneho
 80003c6:	4b8b      	ldr	r3, [pc, #556]	; (80005f4 <Nucleo_SetPinGPIO+0x2c0>)
 80003c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d112      	bne.n	80003f8 <Nucleo_SetPinGPIO+0xc4>
  {
    RCC->AHB1ENR |= enr_mask;                 // povolit hodiny periferie
 80003d2:	4988      	ldr	r1, [pc, #544]	; (80005f4 <Nucleo_SetPinGPIO+0x2c0>)
 80003d4:	4b87      	ldr	r3, [pc, #540]	; (80005f4 <Nucleo_SetPinGPIO+0x2c0>)
 80003d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	4313      	orrs	r3, r2
 80003dc:	630b      	str	r3, [r1, #48]	; 0x30
    RCC->AHB1RSTR |= rstr_mask;               // proved reset periferie
 80003de:	4985      	ldr	r1, [pc, #532]	; (80005f4 <Nucleo_SetPinGPIO+0x2c0>)
 80003e0:	4b84      	ldr	r3, [pc, #528]	; (80005f4 <Nucleo_SetPinGPIO+0x2c0>)
 80003e2:	691a      	ldr	r2, [r3, #16]
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	610b      	str	r3, [r1, #16]
    RCC->AHB1RSTR &= ~rstr_mask;              // a konec resetu
 80003ea:	4982      	ldr	r1, [pc, #520]	; (80005f4 <Nucleo_SetPinGPIO+0x2c0>)
 80003ec:	4b81      	ldr	r3, [pc, #516]	; (80005f4 <Nucleo_SetPinGPIO+0x2c0>)
 80003ee:	691a      	ldr	r2, [r3, #16]
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	43db      	mvns	r3, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	610b      	str	r3, [r1, #16]
  }

  // nastaveni konfiguracnich bitu do defaultniho stavu (nemususelo byt od drive)
  gpio->MODER &= ~(0x03 << (2 * bitnum));   // vynuluj prislusne 2 bity v registru
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	68ba      	ldr	r2, [r7, #8]
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	2103      	movs	r1, #3
 8000402:	fa01 f202 	lsl.w	r2, r1, r2
 8000406:	43d2      	mvns	r2, r2
 8000408:	401a      	ands	r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	601a      	str	r2, [r3, #0]
  gpio->PUPDR &= ~(0x03 << (2 * bitnum));   // vynuluj prislusne 2 bity v registru
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	68ba      	ldr	r2, [r7, #8]
 8000414:	0052      	lsls	r2, r2, #1
 8000416:	2103      	movs	r1, #3
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	60da      	str	r2, [r3, #12]
  gpio->OSPEEDR &= ~(0x03 << (2 * bitnum)); // vynuluj prislusne 2 bity v registru
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	68ba      	ldr	r2, [r7, #8]
 800042a:	0052      	lsls	r2, r2, #1
 800042c:	2103      	movs	r1, #3
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
 8000432:	43d2      	mvns	r2, r2
 8000434:	401a      	ands	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	609a      	str	r2, [r3, #8]

  // nastaveni registru podle typu vystupu/vstupu
  switch(mode)
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b07      	cmp	r3, #7
 800043e:	f200 80c4 	bhi.w	80005ca <Nucleo_SetPinGPIO+0x296>
 8000442:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <Nucleo_SetPinGPIO+0x114>)
 8000444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000448:	08000469 	.word	0x08000469
 800044c:	08000469 	.word	0x08000469
 8000450:	08000547 	.word	0x08000547
 8000454:	0800052f 	.word	0x0800052f
 8000458:	080004d7 	.word	0x080004d7
 800045c:	08000503 	.word	0x08000503
 8000460:	0800055d 	.word	0x0800055d
 8000464:	0800055d 	.word	0x0800055d
  {
    case ioPortOutputOC:
    case ioPortOutputPP:
      gpio->MODER |= 0x01 << (2 * bitnum);    // 01 = output
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	0052      	lsls	r2, r2, #1
 8000470:	2101      	movs	r1, #1
 8000472:	fa01 f202 	lsl.w	r2, r1, r2
 8000476:	431a      	orrs	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	601a      	str	r2, [r3, #0]
      gpio->OSPEEDR |= 0x03 << (2 * bitnum);  // 11 = high speed
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	68ba      	ldr	r2, [r7, #8]
 8000482:	0052      	lsls	r2, r2, #1
 8000484:	2103      	movs	r1, #3
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	431a      	orrs	r2, r3
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	609a      	str	r2, [r3, #8]
      gpio->PUPDR &=  ~(0x03 << (2 * bitnum));  // 00 = no pu/pd
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	2103      	movs	r1, #3
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	43d2      	mvns	r2, r2
 80004a0:	401a      	ands	r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	60da      	str	r2, [r3, #12]

      if (mode == ioPortOutputOC)   // open collector (drain) ?
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d109      	bne.n	80004c0 <Nucleo_SetPinGPIO+0x18c>
        gpio->OTYPER |= 0x01 << bitnum;   // 1 = OC/Open drain
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	2101      	movs	r1, #1
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	431a      	orrs	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	605a      	str	r2, [r3, #4]
      else
        gpio->OTYPER &= ~(0x01 << bitnum);// 0 = push-pull
      break;
 80004be:	e086      	b.n	80005ce <Nucleo_SetPinGPIO+0x29a>
        gpio->OTYPER &= ~(0x01 << bitnum);// 0 = push-pull
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	2101      	movs	r1, #1
 80004c6:	68ba      	ldr	r2, [r7, #8]
 80004c8:	fa01 f202 	lsl.w	r2, r1, r2
 80004cc:	43d2      	mvns	r2, r2
 80004ce:	401a      	ands	r2, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	605a      	str	r2, [r3, #4]
      break;
 80004d4:	e07b      	b.n	80005ce <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputPU:                  // moder bits 00 = input
       gpio->PUPDR &= ~(0x03 << (2 * bitnum));  // clear bits
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	68ba      	ldr	r2, [r7, #8]
 80004dc:	0052      	lsls	r2, r2, #1
 80004de:	2103      	movs	r1, #3
 80004e0:	fa01 f202 	lsl.w	r2, r1, r2
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	401a      	ands	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	60da      	str	r2, [r3, #12]
       gpio->PUPDR |= 0x01 << (2 * bitnum);     // 01 = pull-up
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	0052      	lsls	r2, r2, #1
 80004f4:	2101      	movs	r1, #1
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	431a      	orrs	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	60da      	str	r2, [r3, #12]
       break;
 8000500:	e065      	b.n	80005ce <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputPD:
       gpio->PUPDR &= ~(0x03 << (2 * bitnum));  // clear bits
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	0052      	lsls	r2, r2, #1
 800050a:	2103      	movs	r1, #3
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	43d2      	mvns	r2, r2
 8000512:	401a      	ands	r2, r3
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	60da      	str	r2, [r3, #12]
       gpio->PUPDR |= 0x02 << (2 * bitnum);     // 10 = pull-up
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	68ba      	ldr	r2, [r7, #8]
 800051e:	0052      	lsls	r2, r2, #1
 8000520:	2102      	movs	r1, #2
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	431a      	orrs	r2, r3
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	60da      	str	r2, [r3, #12]
       break;
 800052c:	e04f      	b.n	80005ce <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputFloat:     // 00 = input mode, nothing to do
        gpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/dn
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	0052      	lsls	r2, r2, #1
 8000536:	2103      	movs	r1, #3
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	43d2      	mvns	r2, r2
 800053e:	401a      	ands	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	60da      	str	r2, [r3, #12]
        break;
 8000544:	e043      	b.n	80005ce <Nucleo_SetPinGPIO+0x29a>
     case ioPortAnalog:         // 11 - analog mode
       gpio->MODER |= 0x03 << (2 * bitnum);   // set bits
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	0052      	lsls	r2, r2, #1
 800054e:	2103      	movs	r1, #3
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	431a      	orrs	r2, r3
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	601a      	str	r2, [r3, #0]
       break;
 800055a:	e038      	b.n	80005ce <Nucleo_SetPinGPIO+0x29a>
     case ioPortAlternatePP:
     case ioPortAlternateOC:
       gpio->MODER |= 0x02 << (2 * bitnum); // set bits
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	0052      	lsls	r2, r2, #1
 8000564:	2102      	movs	r1, #2
 8000566:	fa01 f202 	lsl.w	r2, r1, r2
 800056a:	431a      	orrs	r2, r3
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	601a      	str	r2, [r3, #0]

       if (mode == ioPortAlternateOC)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b07      	cmp	r3, #7
 8000574:	d109      	bne.n	800058a <Nucleo_SetPinGPIO+0x256>
         gpio->OTYPER |= 0x01 << bitnum; // 1 = open-drain
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	2101      	movs	r1, #1
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	fa01 f202 	lsl.w	r2, r1, r2
 8000582:	431a      	orrs	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	e009      	b.n	800059e <Nucleo_SetPinGPIO+0x26a>
       else
         gpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	2101      	movs	r1, #1
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	fa01 f202 	lsl.w	r2, r1, r2
 8000596:	43d2      	mvns	r2, r2
 8000598:	401a      	ands	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	605a      	str	r2, [r3, #4]
	
        gpio->OSPEEDR |= 0x03 << (2 * bitnum); // high-speed = 11
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	0052      	lsls	r2, r2, #1
 80005a6:	2103      	movs	r1, #3
 80005a8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ac:	431a      	orrs	r2, r3
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	609a      	str	r2, [r3, #8]
        gpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/pull-down
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	2103      	movs	r1, #3
 80005bc:	fa01 f202 	lsl.w	r2, r1, r2
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	401a      	ands	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	60da      	str	r2, [r3, #12]
                    // don't forget set AFR registers !!!
        break;
 80005c8:	e001      	b.n	80005ce <Nucleo_SetPinGPIO+0x29a>
     default:   // neznamy rezim ?
       return false; // priznak chyby
 80005ca:	2300      	movs	r3, #0
 80005cc:	e000      	b.n	80005d0 <Nucleo_SetPinGPIO+0x29c>
  }

  return true;  // priznak OK
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	371c      	adds	r7, #28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40020800 	.word	0x40020800
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40021c00 	.word	0x40021c00
 80005f0:	40020c00 	.word	0x40020c00
 80005f4:	40023800 	.word	0x40023800

080005f8 <GPIOToggle>:

void GPIOToggle(GPIO_TypeDef *gpio, uint32_t bitnum)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  gpio->ODR ^= (1 << bitnum);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	2101      	movs	r1, #1
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	fa01 f202 	lsl.w	r2, r1, r2
 800060e:	405a      	eors	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	615a      	str	r2, [r3, #20]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000624:	4a16      	ldr	r2, [pc, #88]	; (8000680 <SystemInit+0x60>)
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <SystemInit+0x60>)
 8000628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800062c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000634:	4a13      	ldr	r2, [pc, #76]	; (8000684 <SystemInit+0x64>)
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <SystemInit+0x64>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <SystemInit+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <SystemInit+0x64>)
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <SystemInit+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000654:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <SystemInit+0x64>)
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <SystemInit+0x68>)
 800065a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800065c:	4a09      	ldr	r2, [pc, #36]	; (8000684 <SystemInit+0x64>)
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <SystemInit+0x64>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000666:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <SystemInit+0x60>)
 8000670:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000674:	609a      	str	r2, [r3, #8]
#endif
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00
 8000684:	40023800 	.word	0x40023800
 8000688:	24003010 	.word	0x24003010

0800068c <__libc_init_array>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	4e0d      	ldr	r6, [pc, #52]	; (80006c4 <__libc_init_array+0x38>)
 8000690:	4c0d      	ldr	r4, [pc, #52]	; (80006c8 <__libc_init_array+0x3c>)
 8000692:	1ba4      	subs	r4, r4, r6
 8000694:	10a4      	asrs	r4, r4, #2
 8000696:	2500      	movs	r5, #0
 8000698:	42a5      	cmp	r5, r4
 800069a:	d109      	bne.n	80006b0 <__libc_init_array+0x24>
 800069c:	4e0b      	ldr	r6, [pc, #44]	; (80006cc <__libc_init_array+0x40>)
 800069e:	4c0c      	ldr	r4, [pc, #48]	; (80006d0 <__libc_init_array+0x44>)
 80006a0:	f000 f818 	bl	80006d4 <_init>
 80006a4:	1ba4      	subs	r4, r4, r6
 80006a6:	10a4      	asrs	r4, r4, #2
 80006a8:	2500      	movs	r5, #0
 80006aa:	42a5      	cmp	r5, r4
 80006ac:	d105      	bne.n	80006ba <__libc_init_array+0x2e>
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006b4:	4798      	blx	r3
 80006b6:	3501      	adds	r5, #1
 80006b8:	e7ee      	b.n	8000698 <__libc_init_array+0xc>
 80006ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006be:	4798      	blx	r3
 80006c0:	3501      	adds	r5, #1
 80006c2:	e7f2      	b.n	80006aa <__libc_init_array+0x1e>
 80006c4:	080006ec 	.word	0x080006ec
 80006c8:	080006ec 	.word	0x080006ec
 80006cc:	080006ec 	.word	0x080006ec
 80006d0:	080006f0 	.word	0x080006f0

080006d4 <_init>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr

080006e0 <_fini>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	bf00      	nop
 80006e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e6:	bc08      	pop	{r3}
 80006e8:	469e      	mov	lr, r3
 80006ea:	4770      	bx	lr
