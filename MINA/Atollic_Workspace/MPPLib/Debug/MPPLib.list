
/media/petr/HDD/Atollic_Workspace/MPPLib/Debug/MPPLib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005e0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000778  08000778  00010778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000788  08000788  00010788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800078c  0800078c  0001078c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000004  08000794  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000020  08000794  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000bc3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000035c  00000000  00000000  00020bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000a8  00000000  00000000  00020f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00021000  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000602  00000000  00000000  00021070  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000498  00000000  00000000  00021672  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00021b0a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000164  00000000  00000000  00021b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00021cec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000760 	.word	0x08000760

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000760 	.word	0x08000760

080001d8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
  uint8_t b = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	71fb      	strb	r3, [r7, #7]

  SystemCoreClockUpdate();
 80001e2:	f000 fa1f 	bl	8000624 <SystemCoreClockUpdate>
  SysTick->LOAD = SystemCoreClock - 1;
 80001e6:	4a12      	ldr	r2, [pc, #72]	; (8000230 <main+0x58>)
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <main+0x5c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	3b01      	subs	r3, #1
 80001ee:	6053      	str	r3, [r2, #4]
  SysTick->CTRL |=
 80001f0:	4a0f      	ldr	r2, [pc, #60]	; (8000230 <main+0x58>)
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <main+0x58>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
  SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;

  //Nucleo_SetPinGPIO(GPIOA, 9, ioPortOutputPP); // RGB-Blue
  //Nucleo_SetPinGPIO(GPIOC, 7, ioPortOutputPP); // RGB-Green
  Nucleo_SetPinGPIO(RGB_RED, ioPortOutputPP);   // RGB-Red
 80001fc:	2200      	movs	r2, #0
 80001fe:	2104      	movs	r1, #4
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <main+0x60>)
 8000202:	f000 f845 	bl	8000290 <Nucleo_SetPinGPIO>
  //Nucleo_SetPinGPIO(GPIOB, 4, ioPortOutputPP); // RGB-Red

  GPIOWrite(RGB_RED, 1);
 8000206:	2201      	movs	r2, #1
 8000208:	2104      	movs	r1, #4
 800020a:	480b      	ldr	r0, [pc, #44]	; (8000238 <main+0x60>)
 800020c:	f000 f9b6 	bl	800057c <GPIOWrite>
  /* Infinite loop */
  while (1)
  {
    b++; // obycejne pocitadlo
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	3301      	adds	r3, #1
 8000214:	71fb      	strb	r3, [r7, #7]
    //Write8LED(b);
    GPIOToggle(RGB_RED);
 8000216:	2104      	movs	r1, #4
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <main+0x60>)
 800021a:	f000 f99b 	bl	8000554 <GPIOToggle>
    //GPIOToggle(GPIOB, 14);
    while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 800021e:	bf00      	nop
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <main+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <main+0x48>
    b++; // obycejne pocitadlo
 800022c:	e7f0      	b.n	8000210 <main+0x38>
 800022e:	bf00      	nop
 8000230:	e000e010 	.word	0xe000e010
 8000234:	20000000 	.word	0x20000000
 8000238:	40020400 	.word	0x40020400

0800023c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800023c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000274 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000240:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000242:	e003      	b.n	800024c <LoopCopyDataInit>

08000244 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000246:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000248:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024a:	3104      	adds	r1, #4

0800024c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800024c:	480b      	ldr	r0, [pc, #44]	; (800027c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000250:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000252:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000254:	d3f6      	bcc.n	8000244 <CopyDataInit>
  ldr  r2, =_sbss
 8000256:	4a0b      	ldr	r2, [pc, #44]	; (8000284 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000258:	e002      	b.n	8000260 <LoopFillZerobss>

0800025a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800025a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800025c:	f842 3b04 	str.w	r3, [r2], #4

08000260 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000262:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000264:	d3f9      	bcc.n	800025a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000266:	f000 f9a7 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026a:	f000 fa55 	bl	8000718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800026e:	f7ff ffb3 	bl	80001d8 <main>
  bx  lr    
 8000272:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000274:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000278:	08000790 	.word	0x08000790
  ldr  r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000280:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000284:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000288:	20000020 	.word	0x20000020

0800028c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC_IRQHandler>
	...

08000290 <Nucleo_SetPinGPIO>:


#include "stm_core.h"

bool Nucleo_SetPinGPIO(GPIO_TypeDef *gpio, uint32_t bitnum, eIoPortModes mode)
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	71fb      	strb	r3, [r7, #7]
  uint32_t enr_mask = 0;        // hodnota do xxENR registru
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
  uint32_t rstr_mask = 0;       // hodnota do xxRSTR registru
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]

  switch((uint32_t)gpio)    // detekce, ktery GPIO
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	4aa3      	ldr	r2, [pc, #652]	; (8000538 <Nucleo_SetPinGPIO+0x2a8>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d01d      	beq.n	80002ea <Nucleo_SetPinGPIO+0x5a>
 80002ae:	4aa2      	ldr	r2, [pc, #648]	; (8000538 <Nucleo_SetPinGPIO+0x2a8>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d806      	bhi.n	80002c2 <Nucleo_SetPinGPIO+0x32>
 80002b4:	4aa1      	ldr	r2, [pc, #644]	; (800053c <Nucleo_SetPinGPIO+0x2ac>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d00d      	beq.n	80002d6 <Nucleo_SetPinGPIO+0x46>
 80002ba:	4aa1      	ldr	r2, [pc, #644]	; (8000540 <Nucleo_SetPinGPIO+0x2b0>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d00f      	beq.n	80002e0 <Nucleo_SetPinGPIO+0x50>
 80002c0:	e027      	b.n	8000312 <Nucleo_SetPinGPIO+0x82>
 80002c2:	4aa0      	ldr	r2, [pc, #640]	; (8000544 <Nucleo_SetPinGPIO+0x2b4>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d01a      	beq.n	80002fe <Nucleo_SetPinGPIO+0x6e>
 80002c8:	4a9f      	ldr	r2, [pc, #636]	; (8000548 <Nucleo_SetPinGPIO+0x2b8>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d01c      	beq.n	8000308 <Nucleo_SetPinGPIO+0x78>
 80002ce:	4a9f      	ldr	r2, [pc, #636]	; (800054c <Nucleo_SetPinGPIO+0x2bc>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d00f      	beq.n	80002f4 <Nucleo_SetPinGPIO+0x64>
 80002d4:	e01d      	b.n	8000312 <Nucleo_SetPinGPIO+0x82>
  {
    case (uint32_t)GPIOA:
      enr_mask = RCC_AHB1ENR_GPIOAEN;
 80002d6:	2301      	movs	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOARST;
 80002da:	2301      	movs	r3, #1
 80002dc:	613b      	str	r3, [r7, #16]
      break;
 80002de:	e018      	b.n	8000312 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOB:
      enr_mask = RCC_AHB1ENR_GPIOBEN;
 80002e0:	2302      	movs	r3, #2
 80002e2:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOBRST;
 80002e4:	2302      	movs	r3, #2
 80002e6:	613b      	str	r3, [r7, #16]
      break;
 80002e8:	e013      	b.n	8000312 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOC:
        enr_mask = RCC_AHB1ENR_GPIOCEN;
 80002ea:	2304      	movs	r3, #4
 80002ec:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOCRST;
 80002ee:	2304      	movs	r3, #4
 80002f0:	613b      	str	r3, [r7, #16]
        break;
 80002f2:	e00e      	b.n	8000312 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOD:
        enr_mask = RCC_AHB1ENR_GPIODEN;
 80002f4:	2308      	movs	r3, #8
 80002f6:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIODRST;
 80002f8:	2308      	movs	r3, #8
 80002fa:	613b      	str	r3, [r7, #16]
        break;
 80002fc:	e009      	b.n	8000312 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOE:
        enr_mask = RCC_AHB1ENR_GPIOEEN;
 80002fe:	2310      	movs	r3, #16
 8000300:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOERST;
 8000302:	2310      	movs	r3, #16
 8000304:	613b      	str	r3, [r7, #16]
        break;
 8000306:	e004      	b.n	8000312 <Nucleo_SetPinGPIO+0x82>
        enr_mask = RCC_AHB1ENR_GPIOGEN;
        rstr_mask = RCC_AHB1RSTR_GPIOGRST;
        break;
#endif
    case (uint32_t)GPIOH:
        enr_mask = RCC_AHB1ENR_GPIOHEN;
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOHRST;
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	613b      	str	r3, [r7, #16]
        break;
 8000310:	bf00      	nop
  }

  if ((enr_mask == 0) || (rstr_mask == 0))    // nevybran GPIO
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <Nucleo_SetPinGPIO+0x8e>
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <Nucleo_SetPinGPIO+0x92>
      return false;                           // vrat priznak chyby
 800031e:	2300      	movs	r3, #0
 8000320:	e104      	b.n	800052c <Nucleo_SetPinGPIO+0x29c>


  if (!(RCC->AHB1ENR & enr_mask))             // inicializace vybraneho
 8000322:	4b8b      	ldr	r3, [pc, #556]	; (8000550 <Nucleo_SetPinGPIO+0x2c0>)
 8000324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	4013      	ands	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	d112      	bne.n	8000354 <Nucleo_SetPinGPIO+0xc4>
  {
    RCC->AHB1ENR |= enr_mask;                 // povolit hodiny periferie
 800032e:	4988      	ldr	r1, [pc, #544]	; (8000550 <Nucleo_SetPinGPIO+0x2c0>)
 8000330:	4b87      	ldr	r3, [pc, #540]	; (8000550 <Nucleo_SetPinGPIO+0x2c0>)
 8000332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	4313      	orrs	r3, r2
 8000338:	630b      	str	r3, [r1, #48]	; 0x30
    RCC->AHB1RSTR |= rstr_mask;               // proved reset periferie
 800033a:	4985      	ldr	r1, [pc, #532]	; (8000550 <Nucleo_SetPinGPIO+0x2c0>)
 800033c:	4b84      	ldr	r3, [pc, #528]	; (8000550 <Nucleo_SetPinGPIO+0x2c0>)
 800033e:	691a      	ldr	r2, [r3, #16]
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	4313      	orrs	r3, r2
 8000344:	610b      	str	r3, [r1, #16]
    RCC->AHB1RSTR &= ~rstr_mask;              // a konec resetu
 8000346:	4982      	ldr	r1, [pc, #520]	; (8000550 <Nucleo_SetPinGPIO+0x2c0>)
 8000348:	4b81      	ldr	r3, [pc, #516]	; (8000550 <Nucleo_SetPinGPIO+0x2c0>)
 800034a:	691a      	ldr	r2, [r3, #16]
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	43db      	mvns	r3, r3
 8000350:	4013      	ands	r3, r2
 8000352:	610b      	str	r3, [r1, #16]
  }

  // nastaveni konfiguracnich bitu do defaultniho stavu (nemususelo byt od drive)
  gpio->MODER &= ~(0x03 << (2 * bitnum));   // vynuluj prislusne 2 bity v registru
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	68ba      	ldr	r2, [r7, #8]
 800035a:	0052      	lsls	r2, r2, #1
 800035c:	2103      	movs	r1, #3
 800035e:	fa01 f202 	lsl.w	r2, r1, r2
 8000362:	43d2      	mvns	r2, r2
 8000364:	401a      	ands	r2, r3
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	601a      	str	r2, [r3, #0]
  gpio->PUPDR &= ~(0x03 << (2 * bitnum));   // vynuluj prislusne 2 bity v registru
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	68ba      	ldr	r2, [r7, #8]
 8000370:	0052      	lsls	r2, r2, #1
 8000372:	2103      	movs	r1, #3
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	43d2      	mvns	r2, r2
 800037a:	401a      	ands	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	60da      	str	r2, [r3, #12]
  gpio->OSPEEDR &= ~(0x03 << (2 * bitnum)); // vynuluj prislusne 2 bity v registru
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	68ba      	ldr	r2, [r7, #8]
 8000386:	0052      	lsls	r2, r2, #1
 8000388:	2103      	movs	r1, #3
 800038a:	fa01 f202 	lsl.w	r2, r1, r2
 800038e:	43d2      	mvns	r2, r2
 8000390:	401a      	ands	r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	609a      	str	r2, [r3, #8]

  // nastaveni registru podle typu vystupu/vstupu
  switch(mode)
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2b07      	cmp	r3, #7
 800039a:	f200 80c4 	bhi.w	8000526 <Nucleo_SetPinGPIO+0x296>
 800039e:	a201      	add	r2, pc, #4	; (adr r2, 80003a4 <Nucleo_SetPinGPIO+0x114>)
 80003a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a4:	080003c5 	.word	0x080003c5
 80003a8:	080003c5 	.word	0x080003c5
 80003ac:	080004a3 	.word	0x080004a3
 80003b0:	0800048b 	.word	0x0800048b
 80003b4:	08000433 	.word	0x08000433
 80003b8:	0800045f 	.word	0x0800045f
 80003bc:	080004b9 	.word	0x080004b9
 80003c0:	080004b9 	.word	0x080004b9
  {
    case ioPortOutputOC:
    case ioPortOutputPP:
      gpio->MODER |= 0x01 << (2 * bitnum);    // 01 = output
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	2101      	movs	r1, #1
 80003ce:	fa01 f202 	lsl.w	r2, r1, r2
 80003d2:	431a      	orrs	r2, r3
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	601a      	str	r2, [r3, #0]
      gpio->OSPEEDR |= 0x03 << (2 * bitnum);  // 11 = high speed
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	2103      	movs	r1, #3
 80003e2:	fa01 f202 	lsl.w	r2, r1, r2
 80003e6:	431a      	orrs	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	609a      	str	r2, [r3, #8]
      gpio->PUPDR &=  ~(0x03 << (2 * bitnum));  // 00 = no pu/pd
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	68ba      	ldr	r2, [r7, #8]
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	2103      	movs	r1, #3
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	401a      	ands	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	60da      	str	r2, [r3, #12]

      if (mode == ioPortOutputOC)   // open collector (drain) ?
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d109      	bne.n	800041c <Nucleo_SetPinGPIO+0x18c>
        gpio->OTYPER |= 0x01 << bitnum;   // 1 = OC/Open drain
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	2101      	movs	r1, #1
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	431a      	orrs	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	605a      	str	r2, [r3, #4]
      else
        gpio->OTYPER &= ~(0x01 << bitnum);// 0 = push-pull
      break;
 800041a:	e086      	b.n	800052a <Nucleo_SetPinGPIO+0x29a>
        gpio->OTYPER &= ~(0x01 << bitnum);// 0 = push-pull
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	2101      	movs	r1, #1
 8000422:	68ba      	ldr	r2, [r7, #8]
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	43d2      	mvns	r2, r2
 800042a:	401a      	ands	r2, r3
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	605a      	str	r2, [r3, #4]
      break;
 8000430:	e07b      	b.n	800052a <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputPU:                  // moder bits 00 = input
       gpio->PUPDR &= ~(0x03 << (2 * bitnum));  // clear bits
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	2103      	movs	r1, #3
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	43d2      	mvns	r2, r2
 8000442:	401a      	ands	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	60da      	str	r2, [r3, #12]
       gpio->PUPDR |= 0x01 << (2 * bitnum);     // 01 = pull-up
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	2101      	movs	r1, #1
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	431a      	orrs	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	60da      	str	r2, [r3, #12]
       break;
 800045c:	e065      	b.n	800052a <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputPD:
       gpio->PUPDR &= ~(0x03 << (2 * bitnum));  // clear bits
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	0052      	lsls	r2, r2, #1
 8000466:	2103      	movs	r1, #3
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	43d2      	mvns	r2, r2
 800046e:	401a      	ands	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	60da      	str	r2, [r3, #12]
       gpio->PUPDR |= 0x02 << (2 * bitnum);     // 10 = pull-up
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	68ba      	ldr	r2, [r7, #8]
 800047a:	0052      	lsls	r2, r2, #1
 800047c:	2102      	movs	r1, #2
 800047e:	fa01 f202 	lsl.w	r2, r1, r2
 8000482:	431a      	orrs	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	60da      	str	r2, [r3, #12]
       break;
 8000488:	e04f      	b.n	800052a <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputFloat:     // 00 = input mode, nothing to do
        gpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/dn
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	0052      	lsls	r2, r2, #1
 8000492:	2103      	movs	r1, #3
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	43d2      	mvns	r2, r2
 800049a:	401a      	ands	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	60da      	str	r2, [r3, #12]
        break;
 80004a0:	e043      	b.n	800052a <Nucleo_SetPinGPIO+0x29a>
     case ioPortAnalog:         // 11 - analog mode
       gpio->MODER |= 0x03 << (2 * bitnum);   // set bits
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	2103      	movs	r1, #3
 80004ac:	fa01 f202 	lsl.w	r2, r1, r2
 80004b0:	431a      	orrs	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	601a      	str	r2, [r3, #0]
       break;
 80004b6:	e038      	b.n	800052a <Nucleo_SetPinGPIO+0x29a>
     case ioPortAlternatePP:
     case ioPortAlternateOC:
       gpio->MODER |= 0x02 << (2 * bitnum); // set bits
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	0052      	lsls	r2, r2, #1
 80004c0:	2102      	movs	r1, #2
 80004c2:	fa01 f202 	lsl.w	r2, r1, r2
 80004c6:	431a      	orrs	r2, r3
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	601a      	str	r2, [r3, #0]

       if (mode == ioPortAlternateOC)
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d109      	bne.n	80004e6 <Nucleo_SetPinGPIO+0x256>
         gpio->OTYPER |= 0x01 << bitnum; // 1 = open-drain
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	2101      	movs	r1, #1
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	fa01 f202 	lsl.w	r2, r1, r2
 80004de:	431a      	orrs	r2, r3
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	e009      	b.n	80004fa <Nucleo_SetPinGPIO+0x26a>
       else
         gpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	2101      	movs	r1, #1
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	fa01 f202 	lsl.w	r2, r1, r2
 80004f2:	43d2      	mvns	r2, r2
 80004f4:	401a      	ands	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	605a      	str	r2, [r3, #4]
	
        gpio->OSPEEDR |= 0x03 << (2 * bitnum); // high-speed = 11
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	0052      	lsls	r2, r2, #1
 8000502:	2103      	movs	r1, #3
 8000504:	fa01 f202 	lsl.w	r2, r1, r2
 8000508:	431a      	orrs	r2, r3
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	609a      	str	r2, [r3, #8]
        gpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/pull-down
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	0052      	lsls	r2, r2, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	43d2      	mvns	r2, r2
 800051e:	401a      	ands	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	60da      	str	r2, [r3, #12]
                    // don't forget set AFR registers !!!
        break;
 8000524:	e001      	b.n	800052a <Nucleo_SetPinGPIO+0x29a>
     default:   // neznamy rezim ?
       return false; // priznak chyby
 8000526:	2300      	movs	r3, #0
 8000528:	e000      	b.n	800052c <Nucleo_SetPinGPIO+0x29c>
  }

  return true;  // priznak OK
 800052a:	2301      	movs	r3, #1
}
 800052c:	4618      	mov	r0, r3
 800052e:	371c      	adds	r7, #28
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40020800 	.word	0x40020800
 800053c:	40020000 	.word	0x40020000
 8000540:	40020400 	.word	0x40020400
 8000544:	40021000 	.word	0x40021000
 8000548:	40021c00 	.word	0x40021c00
 800054c:	40020c00 	.word	0x40020c00
 8000550:	40023800 	.word	0x40023800

08000554 <GPIOToggle>:

void GPIOToggle(GPIO_TypeDef *gpio, uint32_t bitnum)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  gpio->ODR ^= (1 << bitnum);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	2101      	movs	r1, #1
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	fa01 f202 	lsl.w	r2, r1, r2
 800056a:	405a      	eors	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	615a      	str	r2, [r3, #20]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <GPIOWrite>:
{
  return ((gpio->IDR & (1 << bitnum)) != 0);    // porovnani = vynucena logicka hodnota
}

void GPIOWrite(GPIO_TypeDef *gpio, uint32_t bitnum, bool state)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	4613      	mov	r3, r2
 8000588:	71fb      	strb	r3, [r7, #7]
  gpio->BSRR = (state) ? (1 << (bitnum)) : ((1 << (bitnum)) << 16);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d005      	beq.n	800059c <GPIOWrite+0x20>
 8000590:	2201      	movs	r2, #1
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	461a      	mov	r2, r3
 800059a:	e005      	b.n	80005a8 <GPIOWrite+0x2c>
 800059c:	2201      	movs	r2, #1
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	041b      	lsls	r3, r3, #16
 80005a6:	461a      	mov	r2, r3
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	619a      	str	r2, [r3, #24]
              // BSRR register - lower 16 bits = Set to 1
              // higher 16 bits = Reset to 0
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005bc:	4a16      	ldr	r2, [pc, #88]	; (8000618 <SystemInit+0x60>)
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <SystemInit+0x60>)
 80005c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005cc:	4a13      	ldr	r2, [pc, #76]	; (800061c <SystemInit+0x64>)
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <SystemInit+0x64>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <SystemInit+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <SystemInit+0x64>)
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <SystemInit+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <SystemInit+0x64>)
 80005f0:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <SystemInit+0x68>)
 80005f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <SystemInit+0x64>)
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <SystemInit+0x64>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <SystemInit+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <SystemInit+0x60>)
 8000608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060c:	609a      	str	r2, [r3, #8]
#endif
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00
 800061c:	40023800 	.word	0x40023800
 8000620:	24003010 	.word	0x24003010

08000624 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b087      	sub	sp, #28
 8000628:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	2302      	movs	r3, #2
 800063c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <SystemCoreClockUpdate+0xe0>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	f003 030c 	and.w	r3, r3, #12
 8000646:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d007      	beq.n	800065e <SystemCoreClockUpdate+0x3a>
 800064e:	2b08      	cmp	r3, #8
 8000650:	d009      	beq.n	8000666 <SystemCoreClockUpdate+0x42>
 8000652:	2b00      	cmp	r3, #0
 8000654:	d13d      	bne.n	80006d2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000656:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <SystemCoreClockUpdate+0xe4>)
 8000658:	4a2c      	ldr	r2, [pc, #176]	; (800070c <SystemCoreClockUpdate+0xe8>)
 800065a:	601a      	str	r2, [r3, #0]
      break;
 800065c:	e03d      	b.n	80006da <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <SystemCoreClockUpdate+0xe4>)
 8000660:	4a2b      	ldr	r2, [pc, #172]	; (8000710 <SystemCoreClockUpdate+0xec>)
 8000662:	601a      	str	r2, [r3, #0]
      break;
 8000664:	e039      	b.n	80006da <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <SystemCoreClockUpdate+0xe0>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	0d9b      	lsrs	r3, r3, #22
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000672:	4b24      	ldr	r3, [pc, #144]	; (8000704 <SystemCoreClockUpdate+0xe0>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800067a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00c      	beq.n	800069c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000682:	4a23      	ldr	r2, [pc, #140]	; (8000710 <SystemCoreClockUpdate+0xec>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	fbb2 f3f3 	udiv	r3, r2, r3
 800068a:	4a1e      	ldr	r2, [pc, #120]	; (8000704 <SystemCoreClockUpdate+0xe0>)
 800068c:	6852      	ldr	r2, [r2, #4]
 800068e:	0992      	lsrs	r2, r2, #6
 8000690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	e00b      	b.n	80006b4 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <SystemCoreClockUpdate+0xe8>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <SystemCoreClockUpdate+0xe0>)
 80006a6:	6852      	ldr	r2, [r2, #4]
 80006a8:	0992      	lsrs	r2, r2, #6
 80006aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006ae:	fb02 f303 	mul.w	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemCoreClockUpdate+0xe0>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	0c1b      	lsrs	r3, r3, #16
 80006ba:	f003 0303 	and.w	r3, r3, #3
 80006be:	3301      	adds	r3, #1
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <SystemCoreClockUpdate+0xe4>)
 80006ce:	6013      	str	r3, [r2, #0]
      break;
 80006d0:	e003      	b.n	80006da <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <SystemCoreClockUpdate+0xe4>)
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <SystemCoreClockUpdate+0xe8>)
 80006d6:	601a      	str	r2, [r3, #0]
      break;
 80006d8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <SystemCoreClockUpdate+0xe0>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	091b      	lsrs	r3, r3, #4
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <SystemCoreClockUpdate+0xf0>)
 80006e6:	5cd3      	ldrb	r3, [r2, r3]
 80006e8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <SystemCoreClockUpdate+0xe4>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	fa22 f303 	lsr.w	r3, r2, r3
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <SystemCoreClockUpdate+0xe4>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	371c      	adds	r7, #28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40023800 	.word	0x40023800
 8000708:	20000000 	.word	0x20000000
 800070c:	00f42400 	.word	0x00f42400
 8000710:	017d7840 	.word	0x017d7840
 8000714:	08000778 	.word	0x08000778

08000718 <__libc_init_array>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	4e0d      	ldr	r6, [pc, #52]	; (8000750 <__libc_init_array+0x38>)
 800071c:	4c0d      	ldr	r4, [pc, #52]	; (8000754 <__libc_init_array+0x3c>)
 800071e:	1ba4      	subs	r4, r4, r6
 8000720:	10a4      	asrs	r4, r4, #2
 8000722:	2500      	movs	r5, #0
 8000724:	42a5      	cmp	r5, r4
 8000726:	d109      	bne.n	800073c <__libc_init_array+0x24>
 8000728:	4e0b      	ldr	r6, [pc, #44]	; (8000758 <__libc_init_array+0x40>)
 800072a:	4c0c      	ldr	r4, [pc, #48]	; (800075c <__libc_init_array+0x44>)
 800072c:	f000 f818 	bl	8000760 <_init>
 8000730:	1ba4      	subs	r4, r4, r6
 8000732:	10a4      	asrs	r4, r4, #2
 8000734:	2500      	movs	r5, #0
 8000736:	42a5      	cmp	r5, r4
 8000738:	d105      	bne.n	8000746 <__libc_init_array+0x2e>
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000740:	4798      	blx	r3
 8000742:	3501      	adds	r5, #1
 8000744:	e7ee      	b.n	8000724 <__libc_init_array+0xc>
 8000746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800074a:	4798      	blx	r3
 800074c:	3501      	adds	r5, #1
 800074e:	e7f2      	b.n	8000736 <__libc_init_array+0x1e>
 8000750:	08000788 	.word	0x08000788
 8000754:	08000788 	.word	0x08000788
 8000758:	08000788 	.word	0x08000788
 800075c:	0800078c 	.word	0x0800078c

08000760 <_init>:
 8000760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000762:	bf00      	nop
 8000764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000766:	bc08      	pop	{r3}
 8000768:	469e      	mov	lr, r3
 800076a:	4770      	bx	lr

0800076c <_fini>:
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076e:	bf00      	nop
 8000770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000772:	bc08      	pop	{r3}
 8000774:	469e      	mov	lr, r3
 8000776:	4770      	bx	lr
