
/media/batekp/Data/FEL/MINA/Atollic_Workspace/UART/Debug/UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017fc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08001994  08001994  00011994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a3c  08001a3c  00011a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a40  08001a40  00011a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08001a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  20000068  08001aac  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000098  08001aac  00020098  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000447f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000bdb  00000000  00000000  00024517  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000238  00000000  00000000  000250f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00025330  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000102f  00000000  00000000  00025500  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001042  00000000  00000000  0002652f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027571  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000e60  00000000  00000000  000275f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800197c 	.word	0x0800197c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	0800197c 	.word	0x0800197c

080001d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	6039      	str	r1, [r7, #0]
 80001e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80001e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	da0b      	bge.n	8000204 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ec:	490d      	ldr	r1, [pc, #52]	; (8000224 <NVIC_SetPriority+0x4c>)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 030f 	and.w	r3, r3, #15
 80001f4:	3b04      	subs	r3, #4
 80001f6:	683a      	ldr	r2, [r7, #0]
 80001f8:	b2d2      	uxtb	r2, r2
 80001fa:	0112      	lsls	r2, r2, #4
 80001fc:	b2d2      	uxtb	r2, r2
 80001fe:	440b      	add	r3, r1
 8000200:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000202:	e009      	b.n	8000218 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000204:	4908      	ldr	r1, [pc, #32]	; (8000228 <NVIC_SetPriority+0x50>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	e000e100 	.word	0xe000e100

0800022c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3b01      	subs	r3, #1
 8000238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800023c:	d301      	bcc.n	8000242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800023e:	2301      	movs	r3, #1
 8000240:	e00f      	b.n	8000262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <SysTick_Config+0x40>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3b01      	subs	r3, #1
 8000248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800024a:	210f      	movs	r1, #15
 800024c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000250:	f7ff ffc2 	bl	80001d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SysTick_Config+0x40>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <SysTick_Config+0x40>)
 800025c:	2207      	movs	r2, #7
 800025e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000260:	2300      	movs	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	e000e010 	.word	0xe000e010

08000270 <SysTick_Handler>:
/* Private functions */

volatile uint32_t _ticks = 0;

void SysTick_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  _ticks++;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <SysTick_Handler+0x18>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	4a03      	ldr	r2, [pc, #12]	; (8000288 <SysTick_Handler+0x18>)
 800027c:	6013      	str	r3, [r2, #0]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000084 	.word	0x20000084

0800028c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800028c:	b5b0      	push	{r4, r5, r7, lr}
 800028e:	b09c      	sub	sp, #112	; 0x70
 8000290:	af00      	add	r7, sp, #0
  uint32_t tm2 = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */


  Usart2Init(0);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 fa60 	bl	800075c <Usart2Init>

  // zrusit bufferovani vystupu i vstupu
  setvbuf(stdout, NULL, _IONBF, 0);
 800029c:	4b43      	ldr	r3, [pc, #268]	; (80003ac <main+0x120>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	6898      	ldr	r0, [r3, #8]
 80002a2:	2300      	movs	r3, #0
 80002a4:	2202      	movs	r2, #2
 80002a6:	2100      	movs	r1, #0
 80002a8:	f000 fe6a 	bl	8000f80 <setvbuf>
  setvbuf(stdin, NULL, _IONBF, 0);
 80002ac:	4b3f      	ldr	r3, [pc, #252]	; (80003ac <main+0x120>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	6858      	ldr	r0, [r3, #4]
 80002b2:	2300      	movs	r3, #0
 80002b4:	2202      	movs	r2, #2
 80002b6:	2100      	movs	r1, #0
 80002b8:	f000 fe62 	bl	8000f80 <setvbuf>

  //Control LED
  Nucleo_SetPinGPIO(RGB_GREEN, ioPortOutputPP);
 80002bc:	2200      	movs	r2, #0
 80002be:	2107      	movs	r1, #7
 80002c0:	483b      	ldr	r0, [pc, #236]	; (80003b0 <main+0x124>)
 80002c2:	f000 f8d5 	bl	8000470 <Nucleo_SetPinGPIO>

  // Enable clock to SysTick
  if (!(RCC->APB1ENR & RCC_APB1ENR_TIM3EN))
 80002c6:	4b3b      	ldr	r3, [pc, #236]	; (80003b4 <main+0x128>)
 80002c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ca:	f003 0302 	and.w	r3, r3, #2
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d111      	bne.n	80002f6 <main+0x6a>
    {
      RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80002d2:	4a38      	ldr	r2, [pc, #224]	; (80003b4 <main+0x128>)
 80002d4:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <main+0x128>)
 80002d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d8:	f043 0302 	orr.w	r3, r3, #2
 80002dc:	6413      	str	r3, [r2, #64]	; 0x40
      RCC->APB1RSTR |= RCC_APB1RSTR_TIM3RST;
 80002de:	4a35      	ldr	r2, [pc, #212]	; (80003b4 <main+0x128>)
 80002e0:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <main+0x128>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	f043 0302 	orr.w	r3, r3, #2
 80002e8:	6213      	str	r3, [r2, #32]
      RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM3RST;
 80002ea:	4a32      	ldr	r2, [pc, #200]	; (80003b4 <main+0x128>)
 80002ec:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <main+0x128>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	f023 0302 	bic.w	r3, r3, #2
 80002f4:	6213      	str	r3, [r2, #32]
    }

  SystemCoreClockUpdate();
 80002f6:	f000 fbd1 	bl	8000a9c <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock / 1000);
 80002fa:	4b2f      	ldr	r3, [pc, #188]	; (80003b8 <main+0x12c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a2f      	ldr	r2, [pc, #188]	; (80003bc <main+0x130>)
 8000300:	fba2 2303 	umull	r2, r3, r2, r3
 8000304:	099b      	lsrs	r3, r3, #6
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff90 	bl	800022c <SysTick_Config>



  char c = 'A';
 800030c:	2341      	movs	r3, #65	; 0x41
 800030e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  char buff [100];

  char znak = '1';
 8000312:	2331      	movs	r3, #49	; 0x31
 8000314:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  Usart2Send(znak); // funkce interne pocka na doodvysilani
 8000318:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fa6b 	bl	80007f8 <Usart2Send>

  sprintf(buff, "ahoj Peto!\n\r ...\n ...");
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4a26      	ldr	r2, [pc, #152]	; (80003c0 <main+0x134>)
 8000326:	461c      	mov	r4, r3
 8000328:	4615      	mov	r5, r2
 800032a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800032c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800032e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000332:	6020      	str	r0, [r4, #0]
 8000334:	3404      	adds	r4, #4
 8000336:	8021      	strh	r1, [r4, #0]
  Usart2String(buff);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fa74 	bl	8000828 <Usart2String>
  printf("Nazdar tyvole...\n\r"); // Nutna uprava souboru syscalls.c
 8000340:	4820      	ldr	r0, [pc, #128]	; (80003c4 <main+0x138>)
 8000342:	f000 fd9b 	bl	8000e7c <iprintf>
  printf("Pokus");
 8000346:	4820      	ldr	r0, [pc, #128]	; (80003c8 <main+0x13c>)
 8000348:	f000 fd98 	bl	8000e7c <iprintf>

  /* Infinite loop */
  while (1)
  {
    if (_ticks >= tm2) // casovani vysilani
 800034c:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <main+0x140>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000352:	429a      	cmp	r2, r3
 8000354:	d319      	bcc.n	800038a <main+0xfe>
    {
      tm2 = _ticks + 500; // každých 100ms
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <main+0x140>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800035e:	66fb      	str	r3, [r7, #108]	; 0x6c
      Usart2Send(c); // funkce interne pocka na doodvysilani
 8000360:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fa47 	bl	80007f8 <Usart2Send>
      c++;
 800036a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800036e:	3301      	adds	r3, #1
 8000370:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
      GPIOToggle(RGB_GREEN);
 8000374:	2107      	movs	r1, #7
 8000376:	480e      	ldr	r0, [pc, #56]	; (80003b0 <main+0x124>)
 8000378:	f000 f9dc 	bl	8000734 <GPIOToggle>

      if (c > 'Z') // vysilame jen velka pismena
 800037c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000380:	2b5a      	cmp	r3, #90	; 0x5a
 8000382:	d902      	bls.n	800038a <main+0xfe>
        c = 'A';
 8000384:	2341      	movs	r3, #65	; 0x41
 8000386:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    }

    if (IsUsart2Recv()) // neco prislo ?
 800038a:	f000 fa75 	bl	8000878 <IsUsart2Recv>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0db      	beq.n	800034c <main+0xc0>
	  {
		  char x = Usart2Recv(); // blokujici funkce
 8000394:	f000 fa5e 	bl	8000854 <Usart2Recv>
 8000398:	4603      	mov	r3, r0
 800039a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		  printf("%c", x);
 800039e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fdd8 	bl	8000f58 <putchar>
    if (_ticks >= tm2) // casovani vysilani
 80003a8:	e7d0      	b.n	800034c <main+0xc0>
 80003aa:	bf00      	nop
 80003ac:	20000004 	.word	0x20000004
 80003b0:	40020800 	.word	0x40020800
 80003b4:	40023800 	.word	0x40023800
 80003b8:	20000000 	.word	0x20000000
 80003bc:	10624dd3 	.word	0x10624dd3
 80003c0:	08001994 	.word	0x08001994
 80003c4:	080019ac 	.word	0x080019ac
 80003c8:	080019c0 	.word	0x080019c0
 80003cc:	20000084 	.word	0x20000084

080003d0 <Nucleo_SetPinAFGPIO>:
#include <nucleo_core.h>

// GPIO functions

bool Nucleo_SetPinAFGPIO(GPIO_TypeDef *gpio, uint32_t bitnum, uint32_t afValue)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
  gpio->AFR[(bitnum < 8) ? 0 : 1] &= ~(0x0f << (4 * (bitnum & 0x07))); // vynuluj AF bity
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	2b07      	cmp	r3, #7
 80003e0:	bf8c      	ite	hi
 80003e2:	2301      	movhi	r3, #1
 80003e4:	2300      	movls	r3, #0
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	4618      	mov	r0, r3
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	2b07      	cmp	r3, #7
 80003ee:	bf8c      	ite	hi
 80003f0:	2301      	movhi	r3, #1
 80003f2:	2300      	movls	r3, #0
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	461a      	mov	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	3208      	adds	r2, #8
 80003fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	f002 0207 	and.w	r2, r2, #7
 8000406:	0092      	lsls	r2, r2, #2
 8000408:	210f      	movs	r1, #15
 800040a:	fa01 f202 	lsl.w	r2, r1, r2
 800040e:	43d2      	mvns	r2, r2
 8000410:	ea03 0102 	and.w	r1, r3, r2
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f100 0208 	add.w	r2, r0, #8
 800041a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  gpio->AFR[(bitnum < 8) ? 0 : 1] |= ((afValue & 0x0f) << (4 * (bitnum & 0x07))); // nastav AF bity
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	2b07      	cmp	r3, #7
 8000422:	bf8c      	ite	hi
 8000424:	2301      	movhi	r3, #1
 8000426:	2300      	movls	r3, #0
 8000428:	b2db      	uxtb	r3, r3
 800042a:	4618      	mov	r0, r3
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	2b07      	cmp	r3, #7
 8000430:	bf8c      	ite	hi
 8000432:	2301      	movhi	r3, #1
 8000434:	2300      	movls	r3, #0
 8000436:	b2db      	uxtb	r3, r3
 8000438:	461a      	mov	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3208      	adds	r2, #8
 800043e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f003 010f 	and.w	r1, r3, #15
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	f003 0307 	and.w	r3, r3, #7
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	ea42 0103 	orr.w	r1, r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f100 0208 	add.w	r2, r0, #8
 800045e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  return true;
 8000462:	2301      	movs	r3, #1
}
 8000464:	4618      	mov	r0, r3
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <Nucleo_SetPinGPIO>:

bool Nucleo_SetPinGPIO(GPIO_TypeDef *gpio, uint32_t bitnum, eIoPortModes mode)
{
 8000470:	b480      	push	{r7}
 8000472:	b087      	sub	sp, #28
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	4613      	mov	r3, r2
 800047c:	71fb      	strb	r3, [r7, #7]
  uint32_t enr_mask = 0;        // hodnota do xxENR registru
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  uint32_t rstr_mask = 0;       // hodnota do xxRSTR registru
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]

  switch((uint32_t)gpio)    // detekce, ktery GPIO
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	4aa3      	ldr	r2, [pc, #652]	; (8000718 <Nucleo_SetPinGPIO+0x2a8>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d01d      	beq.n	80004ca <Nucleo_SetPinGPIO+0x5a>
 800048e:	4aa2      	ldr	r2, [pc, #648]	; (8000718 <Nucleo_SetPinGPIO+0x2a8>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d806      	bhi.n	80004a2 <Nucleo_SetPinGPIO+0x32>
 8000494:	4aa1      	ldr	r2, [pc, #644]	; (800071c <Nucleo_SetPinGPIO+0x2ac>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d00d      	beq.n	80004b6 <Nucleo_SetPinGPIO+0x46>
 800049a:	4aa1      	ldr	r2, [pc, #644]	; (8000720 <Nucleo_SetPinGPIO+0x2b0>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d00f      	beq.n	80004c0 <Nucleo_SetPinGPIO+0x50>
 80004a0:	e027      	b.n	80004f2 <Nucleo_SetPinGPIO+0x82>
 80004a2:	4aa0      	ldr	r2, [pc, #640]	; (8000724 <Nucleo_SetPinGPIO+0x2b4>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d01a      	beq.n	80004de <Nucleo_SetPinGPIO+0x6e>
 80004a8:	4a9f      	ldr	r2, [pc, #636]	; (8000728 <Nucleo_SetPinGPIO+0x2b8>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d01c      	beq.n	80004e8 <Nucleo_SetPinGPIO+0x78>
 80004ae:	4a9f      	ldr	r2, [pc, #636]	; (800072c <Nucleo_SetPinGPIO+0x2bc>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d00f      	beq.n	80004d4 <Nucleo_SetPinGPIO+0x64>
 80004b4:	e01d      	b.n	80004f2 <Nucleo_SetPinGPIO+0x82>
  {
    case (uint32_t)GPIOA:
      enr_mask = RCC_AHB1ENR_GPIOAEN;
 80004b6:	2301      	movs	r3, #1
 80004b8:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOARST;
 80004ba:	2301      	movs	r3, #1
 80004bc:	613b      	str	r3, [r7, #16]
      break;
 80004be:	e018      	b.n	80004f2 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOB:
      enr_mask = RCC_AHB1ENR_GPIOBEN;
 80004c0:	2302      	movs	r3, #2
 80004c2:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOBRST;
 80004c4:	2302      	movs	r3, #2
 80004c6:	613b      	str	r3, [r7, #16]
      break;
 80004c8:	e013      	b.n	80004f2 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOC:
        enr_mask = RCC_AHB1ENR_GPIOCEN;
 80004ca:	2304      	movs	r3, #4
 80004cc:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOCRST;
 80004ce:	2304      	movs	r3, #4
 80004d0:	613b      	str	r3, [r7, #16]
        break;
 80004d2:	e00e      	b.n	80004f2 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOD:
        enr_mask = RCC_AHB1ENR_GPIODEN;
 80004d4:	2308      	movs	r3, #8
 80004d6:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIODRST;
 80004d8:	2308      	movs	r3, #8
 80004da:	613b      	str	r3, [r7, #16]
        break;
 80004dc:	e009      	b.n	80004f2 <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOE:
        enr_mask = RCC_AHB1ENR_GPIOEEN;
 80004de:	2310      	movs	r3, #16
 80004e0:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOERST;
 80004e2:	2310      	movs	r3, #16
 80004e4:	613b      	str	r3, [r7, #16]
        break;
 80004e6:	e004      	b.n	80004f2 <Nucleo_SetPinGPIO+0x82>
        enr_mask = RCC_AHB1ENR_GPIOGEN;
        rstr_mask = RCC_AHB1RSTR_GPIOGRST;
        break;
#endif
    case (uint32_t)GPIOH:
        enr_mask = RCC_AHB1ENR_GPIOHEN;
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOHRST;
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	613b      	str	r3, [r7, #16]
        break;
 80004f0:	bf00      	nop
  }

  if ((enr_mask == 0) || (rstr_mask == 0))    // nevybran GPIO
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <Nucleo_SetPinGPIO+0x8e>
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d101      	bne.n	8000502 <Nucleo_SetPinGPIO+0x92>
      return false;                           // vrat priznak chyby
 80004fe:	2300      	movs	r3, #0
 8000500:	e104      	b.n	800070c <Nucleo_SetPinGPIO+0x29c>


  if (!(RCC->AHB1ENR & enr_mask))             // inicializace vybraneho
 8000502:	4b8b      	ldr	r3, [pc, #556]	; (8000730 <Nucleo_SetPinGPIO+0x2c0>)
 8000504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	4013      	ands	r3, r2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d112      	bne.n	8000534 <Nucleo_SetPinGPIO+0xc4>
  {
    RCC->AHB1ENR |= enr_mask;                 // povolit hodiny periferie
 800050e:	4988      	ldr	r1, [pc, #544]	; (8000730 <Nucleo_SetPinGPIO+0x2c0>)
 8000510:	4b87      	ldr	r3, [pc, #540]	; (8000730 <Nucleo_SetPinGPIO+0x2c0>)
 8000512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	4313      	orrs	r3, r2
 8000518:	630b      	str	r3, [r1, #48]	; 0x30
    RCC->AHB1RSTR |= rstr_mask;               // proved reset periferie
 800051a:	4985      	ldr	r1, [pc, #532]	; (8000730 <Nucleo_SetPinGPIO+0x2c0>)
 800051c:	4b84      	ldr	r3, [pc, #528]	; (8000730 <Nucleo_SetPinGPIO+0x2c0>)
 800051e:	691a      	ldr	r2, [r3, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	4313      	orrs	r3, r2
 8000524:	610b      	str	r3, [r1, #16]
    RCC->AHB1RSTR &= ~rstr_mask;              // a konec resetu
 8000526:	4982      	ldr	r1, [pc, #520]	; (8000730 <Nucleo_SetPinGPIO+0x2c0>)
 8000528:	4b81      	ldr	r3, [pc, #516]	; (8000730 <Nucleo_SetPinGPIO+0x2c0>)
 800052a:	691a      	ldr	r2, [r3, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	43db      	mvns	r3, r3
 8000530:	4013      	ands	r3, r2
 8000532:	610b      	str	r3, [r1, #16]
  }

  // nastaveni konfiguracnich bitu do defaultniho stavu (nemususelo byt od drive)
  gpio->MODER &= ~(0x03 << (2 * bitnum));   // vynuluj prislusne 2 bity v registru
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	0052      	lsls	r2, r2, #1
 800053c:	2103      	movs	r1, #3
 800053e:	fa01 f202 	lsl.w	r2, r1, r2
 8000542:	43d2      	mvns	r2, r2
 8000544:	401a      	ands	r2, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	601a      	str	r2, [r3, #0]
  gpio->PUPDR &= ~(0x03 << (2 * bitnum));   // vynuluj prislusne 2 bity v registru
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	0052      	lsls	r2, r2, #1
 8000552:	2103      	movs	r1, #3
 8000554:	fa01 f202 	lsl.w	r2, r1, r2
 8000558:	43d2      	mvns	r2, r2
 800055a:	401a      	ands	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	60da      	str	r2, [r3, #12]
  gpio->OSPEEDR &= ~(0x03 << (2 * bitnum)); // vynuluj prislusne 2 bity v registru
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	0052      	lsls	r2, r2, #1
 8000568:	2103      	movs	r1, #3
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	43d2      	mvns	r2, r2
 8000570:	401a      	ands	r2, r3
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	609a      	str	r2, [r3, #8]

  // nastaveni registru podle typu vystupu/vstupu
  switch(mode)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b07      	cmp	r3, #7
 800057a:	f200 80c4 	bhi.w	8000706 <Nucleo_SetPinGPIO+0x296>
 800057e:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <Nucleo_SetPinGPIO+0x114>)
 8000580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000584:	080005a5 	.word	0x080005a5
 8000588:	080005a5 	.word	0x080005a5
 800058c:	08000683 	.word	0x08000683
 8000590:	0800066b 	.word	0x0800066b
 8000594:	08000613 	.word	0x08000613
 8000598:	0800063f 	.word	0x0800063f
 800059c:	08000699 	.word	0x08000699
 80005a0:	08000699 	.word	0x08000699
  {
    case ioPortOutputOC:
    case ioPortOutputPP:
      gpio->MODER |= 0x01 << (2 * bitnum);    // 01 = output
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	0052      	lsls	r2, r2, #1
 80005ac:	2101      	movs	r1, #1
 80005ae:	fa01 f202 	lsl.w	r2, r1, r2
 80005b2:	431a      	orrs	r2, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	601a      	str	r2, [r3, #0]
      gpio->OSPEEDR |= 0x03 << (2 * bitnum);  // 11 = high speed
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	68ba      	ldr	r2, [r7, #8]
 80005be:	0052      	lsls	r2, r2, #1
 80005c0:	2103      	movs	r1, #3
 80005c2:	fa01 f202 	lsl.w	r2, r1, r2
 80005c6:	431a      	orrs	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	609a      	str	r2, [r3, #8]
      gpio->PUPDR &=  ~(0x03 << (2 * bitnum));  // 00 = no pu/pd
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	0052      	lsls	r2, r2, #1
 80005d4:	2103      	movs	r1, #3
 80005d6:	fa01 f202 	lsl.w	r2, r1, r2
 80005da:	43d2      	mvns	r2, r2
 80005dc:	401a      	ands	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	60da      	str	r2, [r3, #12]

      if (mode == ioPortOutputOC)   // open collector (drain) ?
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d109      	bne.n	80005fc <Nucleo_SetPinGPIO+0x18c>
        gpio->OTYPER |= 0x01 << bitnum;   // 1 = OC/Open drain
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	2101      	movs	r1, #1
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	fa01 f202 	lsl.w	r2, r1, r2
 80005f4:	431a      	orrs	r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	605a      	str	r2, [r3, #4]
      else
        gpio->OTYPER &= ~(0x01 << bitnum);// 0 = push-pull
      break;
 80005fa:	e086      	b.n	800070a <Nucleo_SetPinGPIO+0x29a>
        gpio->OTYPER &= ~(0x01 << bitnum);// 0 = push-pull
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	2101      	movs	r1, #1
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	fa01 f202 	lsl.w	r2, r1, r2
 8000608:	43d2      	mvns	r2, r2
 800060a:	401a      	ands	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	605a      	str	r2, [r3, #4]
      break;
 8000610:	e07b      	b.n	800070a <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputPU:                  // moder bits 00 = input
       gpio->PUPDR &= ~(0x03 << (2 * bitnum));  // clear bits
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	0052      	lsls	r2, r2, #1
 800061a:	2103      	movs	r1, #3
 800061c:	fa01 f202 	lsl.w	r2, r1, r2
 8000620:	43d2      	mvns	r2, r2
 8000622:	401a      	ands	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	60da      	str	r2, [r3, #12]
       gpio->PUPDR |= 0x01 << (2 * bitnum);     // 01 = pull-up
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	0052      	lsls	r2, r2, #1
 8000630:	2101      	movs	r1, #1
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	431a      	orrs	r2, r3
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	60da      	str	r2, [r3, #12]
       break;
 800063c:	e065      	b.n	800070a <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputPD:
       gpio->PUPDR &= ~(0x03 << (2 * bitnum));  // clear bits
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	0052      	lsls	r2, r2, #1
 8000646:	2103      	movs	r1, #3
 8000648:	fa01 f202 	lsl.w	r2, r1, r2
 800064c:	43d2      	mvns	r2, r2
 800064e:	401a      	ands	r2, r3
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	60da      	str	r2, [r3, #12]
       gpio->PUPDR |= 0x02 << (2 * bitnum);     // 10 = pull-up
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	0052      	lsls	r2, r2, #1
 800065c:	2102      	movs	r1, #2
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	431a      	orrs	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	60da      	str	r2, [r3, #12]
       break;
 8000668:	e04f      	b.n	800070a <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputFloat:     // 00 = input mode, nothing to do
        gpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/dn
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	2103      	movs	r1, #3
 8000674:	fa01 f202 	lsl.w	r2, r1, r2
 8000678:	43d2      	mvns	r2, r2
 800067a:	401a      	ands	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	60da      	str	r2, [r3, #12]
        break;
 8000680:	e043      	b.n	800070a <Nucleo_SetPinGPIO+0x29a>
     case ioPortAnalog:         // 11 - analog mode
       gpio->MODER |= 0x03 << (2 * bitnum);   // set bits
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	2103      	movs	r1, #3
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	431a      	orrs	r2, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	601a      	str	r2, [r3, #0]
       break;
 8000696:	e038      	b.n	800070a <Nucleo_SetPinGPIO+0x29a>
     case ioPortAlternatePP:
     case ioPortAlternateOC:
       gpio->MODER |= 0x02 << (2 * bitnum); // set bits
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	2102      	movs	r1, #2
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	431a      	orrs	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]

       if (mode == ioPortAlternateOC)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b07      	cmp	r3, #7
 80006b0:	d109      	bne.n	80006c6 <Nucleo_SetPinGPIO+0x256>
         gpio->OTYPER |= 0x01 << bitnum; // 1 = open-drain
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	2101      	movs	r1, #1
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	fa01 f202 	lsl.w	r2, r1, r2
 80006be:	431a      	orrs	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	e009      	b.n	80006da <Nucleo_SetPinGPIO+0x26a>
       else
         gpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	2101      	movs	r1, #1
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	43d2      	mvns	r2, r2
 80006d4:	401a      	ands	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	605a      	str	r2, [r3, #4]
	
        gpio->OSPEEDR |= 0x03 << (2 * bitnum); // high-speed = 11
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	2103      	movs	r1, #3
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	431a      	orrs	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	609a      	str	r2, [r3, #8]
        gpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/pull-down
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	0052      	lsls	r2, r2, #1
 80006f6:	2103      	movs	r1, #3
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	43d2      	mvns	r2, r2
 80006fe:	401a      	ands	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	60da      	str	r2, [r3, #12]
                    // don't forget set AFR registers !!!
        break;
 8000704:	e001      	b.n	800070a <Nucleo_SetPinGPIO+0x29a>
     default:   // neznamy rezim ?
       return false; // priznak chyby
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <Nucleo_SetPinGPIO+0x29c>
  }

  return true;  // priznak OK
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40020800 	.word	0x40020800
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400
 8000724:	40021000 	.word	0x40021000
 8000728:	40021c00 	.word	0x40021c00
 800072c:	40020c00 	.word	0x40020c00
 8000730:	40023800 	.word	0x40023800

08000734 <GPIOToggle>:

void GPIOToggle(GPIO_TypeDef *gpio, uint32_t bitnum)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  gpio->ODR ^= (1 << bitnum);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	2101      	movs	r1, #1
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	405a      	eors	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	615a      	str	r2, [r3, #20]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <Usart2Init>:

#include <nucleo_usart.h>

// USART Functions
void Usart2Init(int baudSpeed)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  //Set TX and RX pins to AF
    Nucleo_SetPinGPIO(GPIOA, 2, ioPortAlternatePP);
 8000764:	2206      	movs	r2, #6
 8000766:	2102      	movs	r1, #2
 8000768:	4820      	ldr	r0, [pc, #128]	; (80007ec <Usart2Init+0x90>)
 800076a:	f7ff fe81 	bl	8000470 <Nucleo_SetPinGPIO>
    Nucleo_SetPinGPIO(GPIOA, 3, ioPortAlternatePP);
 800076e:	2206      	movs	r2, #6
 8000770:	2103      	movs	r1, #3
 8000772:	481e      	ldr	r0, [pc, #120]	; (80007ec <Usart2Init+0x90>)
 8000774:	f7ff fe7c 	bl	8000470 <Nucleo_SetPinGPIO>

    Nucleo_SetPinAFGPIO(GPIOA, 2, 7);
 8000778:	2207      	movs	r2, #7
 800077a:	2102      	movs	r1, #2
 800077c:	481b      	ldr	r0, [pc, #108]	; (80007ec <Usart2Init+0x90>)
 800077e:	f7ff fe27 	bl	80003d0 <Nucleo_SetPinAFGPIO>
    Nucleo_SetPinAFGPIO(GPIOA, 3, 7);
 8000782:	2207      	movs	r2, #7
 8000784:	2103      	movs	r1, #3
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <Usart2Init+0x90>)
 8000788:	f7ff fe22 	bl	80003d0 <Nucleo_SetPinAFGPIO>

    // Enable Clock to USART2
    if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) // neni povolen USART2
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <Usart2Init+0x94>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000794:	2b00      	cmp	r3, #0
 8000796:	d111      	bne.n	80007bc <Usart2Init+0x60>
    {
      RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000798:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <Usart2Init+0x94>)
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <Usart2Init+0x94>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
      RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <Usart2Init+0x94>)
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <Usart2Init+0x94>)
 80007a8:	6a1b      	ldr	r3, [r3, #32]
 80007aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ae:	6213      	str	r3, [r2, #32]
      RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <Usart2Init+0x94>)
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <Usart2Init+0x94>)
 80007b4:	6a1b      	ldr	r3, [r3, #32]
 80007b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007ba:	6213      	str	r3, [r2, #32]
    }

    USART2->CR1 = USART_CR1_RE | USART_CR1_TE; // staci povoleni prijmu a vysilani
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <Usart2Init+0x98>)
 80007be:	220c      	movs	r2, #12
 80007c0:	60da      	str	r2, [r3, #12]
    USART2->CR2 = 0; // nic specialniho
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <Usart2Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
    USART2->CR3 = 0; // nic specialniho
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <Usart2Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]

    //TODO doplnit vypocet BRR podle pozadovaneho a podle clocku
    USART2->BRR = 0x1A1; // rychlost 38400 pri 16MHz - spocitano predem
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <Usart2Init+0x98>)
 80007d0:	f240 12a1 	movw	r2, #417	; 0x1a1
 80007d4:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_UE; // az na zaver povolen blok USARTu
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <Usart2Init+0x98>)
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <Usart2Init+0x98>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e0:	60d3      	str	r3, [r2, #12]
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40004400 	.word	0x40004400

080007f8 <Usart2Send>:

int Usart2Send(char c)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  while(!(USART2->SR & USART_SR_TXE))
 8000802:	bf00      	nop
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <Usart2Send+0x2c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f9      	beq.n	8000804 <Usart2Send+0xc>
    ; // cekej dokud neni volny TDR

  USART2->DR = c; // zapis do TDR k odeslani
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <Usart2Send+0x2c>)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	6053      	str	r3, [r2, #4]
  return c;
 8000816:	79fb      	ldrb	r3, [r7, #7]
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	40004400 	.word	0x40004400

08000828 <Usart2String>:

void Usart2String(char *txt)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  while(*txt)
 8000830:	e007      	b.n	8000842 <Usart2String+0x1a>
  {
    Usart2Send(*txt);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffde 	bl	80007f8 <Usart2Send>
    txt++;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3301      	adds	r3, #1
 8000840:	607b      	str	r3, [r7, #4]
  while(*txt)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f3      	bne.n	8000832 <Usart2String+0xa>
  }
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <Usart2Recv>:
  }
  return 0;
}

int Usart2Recv(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  while(!(USART2->SR & USART_SR_RXNE)) // cekej dokud neprijde
 8000858:	bf00      	nop
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <Usart2Recv+0x20>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f9      	beq.n	800085a <Usart2Recv+0x6>
    ;
  return USART2->DR; // vycti a vrat jako hodnotu
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <Usart2Recv+0x20>)
 8000868:	685b      	ldr	r3, [r3, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	40004400 	.word	0x40004400

08000878 <IsUsart2Recv>:

bool IsUsart2Recv(void) // priznak, ze je neco v bufferu
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return (USART2->SR & USART_SR_RXNE) != 0;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <IsUsart2Recv+0x20>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f003 0320 	and.w	r3, r3, #32
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2db      	uxtb	r3, r3
  // podminka vynuti true/false vysledek
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40004400 	.word	0x40004400

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008a2:	e003      	b.n	80008ac <LoopCopyDataInit>

080008a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008aa:	3104      	adds	r1, #4

080008ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008b4:	d3f6      	bcc.n	80008a4 <CopyDataInit>
  ldr  r2, =_sbss
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008b8:	e002      	b.n	80008c0 <LoopFillZerobss>

080008ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008bc:	f842 3b04 	str.w	r3, [r2], #4

080008c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008c4:	d3f9      	bcc.n	80008ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008c6:	f000 f8b3 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f000 fb21 	bl	8000f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fcdd 	bl	800028c <main>
  bx  lr    
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008d8:	08001a44 	.word	0x08001a44
  ldr  r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008e0:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80008e4:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80008e8:	20000098 	.word	0x20000098

080008ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>
	...

080008f0 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
  int i;
  for(i = 0; i < len; i++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	e009      	b.n	8000916 <_write+0x26>
    Usart2Send(ptr[i]);
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	4413      	add	r3, r2
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff74 	bl	80007f8 <Usart2Send>
  for(i = 0; i < len; i++)
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3301      	adds	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	dbf1      	blt.n	8000902 <_write+0x12>

  errno = 0;  //OK
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <_write+0x40>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]

  return len; // kolik se odeslalo
 8000924:	687b      	ldr	r3, [r7, #4]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000094 	.word	0x20000094

08000934 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  *ptr = Usart2Recv();
 8000940:	f7ff ff88 	bl	8000854 <Usart2Recv>
 8000944:	4603      	mov	r3, r0
 8000946:	b2da      	uxtb	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	701a      	strb	r2, [r3, #0]

  errno = 0;  //OK
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <_read+0x28>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
  return 1;   //prijal se prave jeden
 8000952:	2301      	movs	r3, #1
  // OK
  // prijal se prave jeden
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000094 	.word	0x20000094

08000960 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <_sbrk+0x38>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x16>
		heap_end = & end;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <_sbrk+0x38>)
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <_sbrk+0x3c>)
 8000974:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <_sbrk+0x38>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <_sbrk+0x38>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <_sbrk+0x38>)
 8000986:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8000988:	68fb      	ldr	r3, [r7, #12]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000088 	.word	0x20000088
 800099c:	20000098 	.word	0x20000098

080009a0 <_close>:

int _close(int32_t file)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <_close+0x20>)
 80009aa:	2258      	movs	r2, #88	; 0x58
 80009ac:	601a      	str	r2, [r3, #0]
	return -1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000094 	.word	0x20000094

080009c4 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <_fstat+0x20>)
 80009d0:	2258      	movs	r2, #88	; 0x58
 80009d2:	601a      	str	r2, [r3, #0]
	return -1;
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	20000094 	.word	0x20000094

080009e8 <_isatty>:

int _isatty(int32_t file)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <_isatty+0x1c>)
 80009f2:	2258      	movs	r2, #88	; 0x58
 80009f4:	601a      	str	r2, [r3, #0]
	return 0;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000094 	.word	0x20000094

08000a08 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <_lseek+0x24>)
 8000a16:	2258      	movs	r2, #88	; 0x58
 8000a18:	601a      	str	r2, [r3, #0]
	return -1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000094 	.word	0x20000094

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <SystemInit+0x60>)
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <SystemInit+0x60>)
 8000a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <SystemInit+0x64>)
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <SystemInit+0x64>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <SystemInit+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <SystemInit+0x64>)
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <SystemInit+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <SystemInit+0x64>)
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <SystemInit+0x68>)
 8000a6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a6c:	4a09      	ldr	r2, [pc, #36]	; (8000a94 <SystemInit+0x64>)
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <SystemInit+0x64>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SystemInit+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SystemInit+0x60>)
 8000a80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a84:	609a      	str	r2, [r3, #8]
#endif
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00
 8000a94:	40023800 	.word	0x40023800
 8000a98:	24003010 	.word	0x24003010

08000a9c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	2302      	movs	r3, #2
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <SystemCoreClockUpdate+0xe0>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d007      	beq.n	8000ad6 <SystemCoreClockUpdate+0x3a>
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d009      	beq.n	8000ade <SystemCoreClockUpdate+0x42>
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d13d      	bne.n	8000b4a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <SystemCoreClockUpdate+0xe4>)
 8000ad0:	4a2c      	ldr	r2, [pc, #176]	; (8000b84 <SystemCoreClockUpdate+0xe8>)
 8000ad2:	601a      	str	r2, [r3, #0]
      break;
 8000ad4:	e03d      	b.n	8000b52 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <SystemCoreClockUpdate+0xe4>)
 8000ad8:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <SystemCoreClockUpdate+0xec>)
 8000ada:	601a      	str	r2, [r3, #0]
      break;
 8000adc:	e039      	b.n	8000b52 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <SystemCoreClockUpdate+0xe0>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	0d9b      	lsrs	r3, r3, #22
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aea:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <SystemCoreClockUpdate+0xe0>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000af2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00c      	beq.n	8000b14 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <SystemCoreClockUpdate+0xec>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <SystemCoreClockUpdate+0xe0>)
 8000b04:	6852      	ldr	r2, [r2, #4]
 8000b06:	0992      	lsrs	r2, r2, #6
 8000b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b0c:	fb02 f303 	mul.w	r3, r2, r3
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e00b      	b.n	8000b2c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <SystemCoreClockUpdate+0xe8>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1c:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <SystemCoreClockUpdate+0xe0>)
 8000b1e:	6852      	ldr	r2, [r2, #4]
 8000b20:	0992      	lsrs	r2, r2, #6
 8000b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <SystemCoreClockUpdate+0xe0>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	0c1b      	lsrs	r3, r3, #16
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	3301      	adds	r3, #1
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <SystemCoreClockUpdate+0xe4>)
 8000b46:	6013      	str	r3, [r2, #0]
      break;
 8000b48:	e003      	b.n	8000b52 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <SystemCoreClockUpdate+0xe4>)
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <SystemCoreClockUpdate+0xe8>)
 8000b4e:	601a      	str	r2, [r3, #0]
      break;
 8000b50:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <SystemCoreClockUpdate+0xe0>)
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	f003 030f 	and.w	r3, r3, #15
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <SystemCoreClockUpdate+0xf0>)
 8000b5e:	5cd3      	ldrb	r3, [r2, r3]
 8000b60:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <SystemCoreClockUpdate+0xe4>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	fa22 f303 	lsr.w	r3, r2, r3
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <SystemCoreClockUpdate+0xe4>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	371c      	adds	r7, #28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	20000000 	.word	0x20000000
 8000b84:	00f42400 	.word	0x00f42400
 8000b88:	017d7840 	.word	0x017d7840
 8000b8c:	080019c8 	.word	0x080019c8

08000b90 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000ba0:	e004      	b.n	8000bac <ts_itoa+0x1c>
		div *= base;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	fb02 f303 	mul.w	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d2f3      	bcs.n	8000ba2 <ts_itoa+0x12>

	while (div != 0)
 8000bba:	e029      	b.n	8000c10 <ts_itoa+0x80>
	{
		int num = d/div;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc4:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bce:	fb02 f201 	mul.w	r2, r2, r1
 8000bd2:	1a9b      	subs	r3, r3, r2
 8000bd4:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	2b09      	cmp	r3, #9
 8000be4:	dd0a      	ble.n	8000bfc <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1c59      	adds	r1, r3, #1
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	6011      	str	r1, [r2, #0]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	3237      	adds	r2, #55	; 0x37
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e009      	b.n	8000c10 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1c59      	adds	r1, r3, #1
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	6011      	str	r1, [r2, #0]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	3230      	adds	r2, #48	; 0x30
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1d2      	bne.n	8000bbc <ts_itoa+0x2c>
	}
}
 8000c16:	bf00      	nop
 8000c18:	371c      	adds	r7, #28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b088      	sub	sp, #32
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000c32:	e07d      	b.n	8000d30 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b25      	cmp	r3, #37	; 0x25
 8000c3a:	d171      	bne.n	8000d20 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b64      	cmp	r3, #100	; 0x64
 8000c48:	d01e      	beq.n	8000c88 <ts_formatstring+0x66>
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	dc06      	bgt.n	8000c5c <ts_formatstring+0x3a>
 8000c4e:	2b58      	cmp	r3, #88	; 0x58
 8000c50:	d050      	beq.n	8000cf4 <ts_formatstring+0xd2>
 8000c52:	2b63      	cmp	r3, #99	; 0x63
 8000c54:	d00e      	beq.n	8000c74 <ts_formatstring+0x52>
 8000c56:	2b25      	cmp	r3, #37	; 0x25
 8000c58:	d058      	beq.n	8000d0c <ts_formatstring+0xea>
 8000c5a:	e05d      	b.n	8000d18 <ts_formatstring+0xf6>
 8000c5c:	2b73      	cmp	r3, #115	; 0x73
 8000c5e:	d02b      	beq.n	8000cb8 <ts_formatstring+0x96>
 8000c60:	2b73      	cmp	r3, #115	; 0x73
 8000c62:	dc02      	bgt.n	8000c6a <ts_formatstring+0x48>
 8000c64:	2b69      	cmp	r3, #105	; 0x69
 8000c66:	d00f      	beq.n	8000c88 <ts_formatstring+0x66>
 8000c68:	e056      	b.n	8000d18 <ts_formatstring+0xf6>
 8000c6a:	2b75      	cmp	r3, #117	; 0x75
 8000c6c:	d037      	beq.n	8000cde <ts_formatstring+0xbc>
 8000c6e:	2b78      	cmp	r3, #120	; 0x78
 8000c70:	d040      	beq.n	8000cf4 <ts_formatstring+0xd2>
 8000c72:	e051      	b.n	8000d18 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60fa      	str	r2, [r7, #12]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	1d11      	adds	r1, r2, #4
 8000c7e:	6079      	str	r1, [r7, #4]
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	701a      	strb	r2, [r3, #0]
				break;
 8000c86:	e047      	b.n	8000d18 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	1d1a      	adds	r2, r3, #4
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	da07      	bge.n	8000ca8 <ts_formatstring+0x86>
					{
						val *= -1;
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	60fa      	str	r2, [r7, #12]
 8000ca4:	222d      	movs	r2, #45	; 0x2d
 8000ca6:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000ca8:	69f9      	ldr	r1, [r7, #28]
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	220a      	movs	r2, #10
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff6d 	bl	8000b90 <ts_itoa>
				}
				break;
 8000cb6:	e02f      	b.n	8000d18 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	1d1a      	adds	r2, r3, #4
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000cc2:	e007      	b.n	8000cd4 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60fa      	str	r2, [r7, #12]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	1c51      	adds	r1, r2, #1
 8000cce:	61b9      	str	r1, [r7, #24]
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f3      	bne.n	8000cc4 <ts_formatstring+0xa2>
					}
				}
				break;
 8000cdc:	e01c      	b.n	8000d18 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	1d1a      	adds	r2, r3, #4
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	6819      	ldr	r1, [r3, #0]
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	220a      	movs	r2, #10
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff4f 	bl	8000b90 <ts_itoa>
				break;
 8000cf2:	e011      	b.n	8000d18 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	1d1a      	adds	r2, r3, #4
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	2210      	movs	r2, #16
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff43 	bl	8000b90 <ts_itoa>
				break;
 8000d0a:	e005      	b.n	8000d18 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60fa      	str	r2, [r7, #12]
 8000d12:	2225      	movs	r2, #37	; 0x25
 8000d14:	701a      	strb	r2, [r3, #0]
				  break;
 8000d16:	bf00      	nop
			}
			fmt++;
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	e007      	b.n	8000d30 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	60fa      	str	r2, [r7, #12]
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	1c51      	adds	r1, r2, #1
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f47f af7d 	bne.w	8000c34 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	461a      	mov	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	1ad3      	subs	r3, r2, r3
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	int length = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8000d5e:	e081      	b.n	8000e64 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b25      	cmp	r3, #37	; 0x25
 8000d66:	d177      	bne.n	8000e58 <ts_formatlength+0x108>
		{
			++fmt;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	3b58      	subs	r3, #88	; 0x58
 8000d74:	2b20      	cmp	r3, #32
 8000d76:	d86a      	bhi.n	8000e4e <ts_formatlength+0xfe>
 8000d78:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <ts_formatlength+0x30>)
 8000d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7e:	bf00      	nop
 8000d80:	08000e41 	.word	0x08000e41
 8000d84:	08000e4f 	.word	0x08000e4f
 8000d88:	08000e4f 	.word	0x08000e4f
 8000d8c:	08000e4f 	.word	0x08000e4f
 8000d90:	08000e4f 	.word	0x08000e4f
 8000d94:	08000e4f 	.word	0x08000e4f
 8000d98:	08000e4f 	.word	0x08000e4f
 8000d9c:	08000e4f 	.word	0x08000e4f
 8000da0:	08000e4f 	.word	0x08000e4f
 8000da4:	08000e4f 	.word	0x08000e4f
 8000da8:	08000e4f 	.word	0x08000e4f
 8000dac:	08000e05 	.word	0x08000e05
 8000db0:	08000e13 	.word	0x08000e13
 8000db4:	08000e4f 	.word	0x08000e4f
 8000db8:	08000e4f 	.word	0x08000e4f
 8000dbc:	08000e4f 	.word	0x08000e4f
 8000dc0:	08000e4f 	.word	0x08000e4f
 8000dc4:	08000e13 	.word	0x08000e13
 8000dc8:	08000e4f 	.word	0x08000e4f
 8000dcc:	08000e4f 	.word	0x08000e4f
 8000dd0:	08000e4f 	.word	0x08000e4f
 8000dd4:	08000e4f 	.word	0x08000e4f
 8000dd8:	08000e4f 	.word	0x08000e4f
 8000ddc:	08000e4f 	.word	0x08000e4f
 8000de0:	08000e4f 	.word	0x08000e4f
 8000de4:	08000e4f 	.word	0x08000e4f
 8000de8:	08000e4f 	.word	0x08000e4f
 8000dec:	08000e21 	.word	0x08000e21
 8000df0:	08000e4f 	.word	0x08000e4f
 8000df4:	08000e13 	.word	0x08000e13
 8000df8:	08000e4f 	.word	0x08000e4f
 8000dfc:	08000e4f 	.word	0x08000e4f
 8000e00:	08000e41 	.word	0x08000e41
			{
			  case 'c':
		  		  va_arg(va, int);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	3304      	adds	r3, #4
 8000e08:	603b      	str	r3, [r7, #0]
				  ++length;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
				  break;
 8000e10:	e025      	b.n	8000e5e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	330b      	adds	r3, #11
 8000e16:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	603b      	str	r3, [r7, #0]
				  break;
 8000e1e:	e01e      	b.n	8000e5e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	1d1a      	adds	r2, r3, #4
 8000e24:	603a      	str	r2, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8000e2a:	e002      	b.n	8000e32 <ts_formatlength+0xe2>
			  			  ++length;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f6      	bne.n	8000e2c <ts_formatlength+0xdc>
			  	  }
				  break;
 8000e3e:	e00e      	b.n	8000e5e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3308      	adds	r3, #8
 8000e44:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	603b      	str	r3, [r7, #0]
				  break;
 8000e4c:	e007      	b.n	8000e5e <ts_formatlength+0x10e>
			  default:
				  ++length;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3301      	adds	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
				  break;
 8000e54:	bf00      	nop
 8000e56:	e002      	b.n	8000e5e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3301      	adds	r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f47f af79 	bne.w	8000d60 <ts_formatlength+0x10>
	}
	return length;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8000e7c:	b40f      	push	{r0, r1, r2, r3}
 8000e7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
	int length = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8000e8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e8e:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e94:	f7ff ff5c 	bl	8000d50 <ts_formatlength>
 8000e98:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8000e9a:	466b      	mov	r3, sp
 8000e9c:	461e      	mov	r6, r3
		char buf[length];
 8000e9e:	68f9      	ldr	r1, [r7, #12]
 8000ea0:	1e4b      	subs	r3, r1, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000eb0:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000eb4:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	461a      	mov	r2, r3
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	00dd      	lsls	r5, r3, #3
 8000ec2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000ec6:	00d4      	lsls	r4, r2, #3
 8000ec8:	460b      	mov	r3, r1
 8000eca:	3307      	adds	r3, #7
 8000ecc:	08db      	lsrs	r3, r3, #3
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ed4:	466b      	mov	r3, sp
 8000ed6:	3300      	adds	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8000eda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ede:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fe9b 	bl	8000c22 <ts_formatstring>
 8000eec:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff fcfb 	bl	80008f0 <_write>
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f0a:	b004      	add	sp, #16
 8000f0c:	4770      	bx	lr
	...

08000f10 <__libc_init_array>:
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	4e0d      	ldr	r6, [pc, #52]	; (8000f48 <__libc_init_array+0x38>)
 8000f14:	4c0d      	ldr	r4, [pc, #52]	; (8000f4c <__libc_init_array+0x3c>)
 8000f16:	1ba4      	subs	r4, r4, r6
 8000f18:	10a4      	asrs	r4, r4, #2
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	42a5      	cmp	r5, r4
 8000f1e:	d109      	bne.n	8000f34 <__libc_init_array+0x24>
 8000f20:	4e0b      	ldr	r6, [pc, #44]	; (8000f50 <__libc_init_array+0x40>)
 8000f22:	4c0c      	ldr	r4, [pc, #48]	; (8000f54 <__libc_init_array+0x44>)
 8000f24:	f000 fd2a 	bl	800197c <_init>
 8000f28:	1ba4      	subs	r4, r4, r6
 8000f2a:	10a4      	asrs	r4, r4, #2
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	42a5      	cmp	r5, r4
 8000f30:	d105      	bne.n	8000f3e <__libc_init_array+0x2e>
 8000f32:	bd70      	pop	{r4, r5, r6, pc}
 8000f34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f38:	4798      	blx	r3
 8000f3a:	3501      	adds	r5, #1
 8000f3c:	e7ee      	b.n	8000f1c <__libc_init_array+0xc>
 8000f3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f42:	4798      	blx	r3
 8000f44:	3501      	adds	r5, #1
 8000f46:	e7f2      	b.n	8000f2e <__libc_init_array+0x1e>
 8000f48:	08001a3c 	.word	0x08001a3c
 8000f4c:	08001a3c 	.word	0x08001a3c
 8000f50:	08001a3c 	.word	0x08001a3c
 8000f54:	08001a40 	.word	0x08001a40

08000f58 <putchar>:
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <putchar+0x24>)
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	4605      	mov	r5, r0
 8000f60:	b124      	cbz	r4, 8000f6c <putchar+0x14>
 8000f62:	69a3      	ldr	r3, [r4, #24]
 8000f64:	b913      	cbnz	r3, 8000f6c <putchar+0x14>
 8000f66:	4620      	mov	r0, r4
 8000f68:	f000 f9aa 	bl	80012c0 <__sinit>
 8000f6c:	68a2      	ldr	r2, [r4, #8]
 8000f6e:	4629      	mov	r1, r5
 8000f70:	4620      	mov	r0, r4
 8000f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f76:	f000 bb4d 	b.w	8001614 <_putc_r>
 8000f7a:	bf00      	nop
 8000f7c:	20000004 	.word	0x20000004

08000f80 <setvbuf>:
 8000f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f84:	461d      	mov	r5, r3
 8000f86:	4b51      	ldr	r3, [pc, #324]	; (80010cc <setvbuf+0x14c>)
 8000f88:	681e      	ldr	r6, [r3, #0]
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	460f      	mov	r7, r1
 8000f8e:	4690      	mov	r8, r2
 8000f90:	b126      	cbz	r6, 8000f9c <setvbuf+0x1c>
 8000f92:	69b3      	ldr	r3, [r6, #24]
 8000f94:	b913      	cbnz	r3, 8000f9c <setvbuf+0x1c>
 8000f96:	4630      	mov	r0, r6
 8000f98:	f000 f992 	bl	80012c0 <__sinit>
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <setvbuf+0x150>)
 8000f9e:	429c      	cmp	r4, r3
 8000fa0:	d152      	bne.n	8001048 <setvbuf+0xc8>
 8000fa2:	6874      	ldr	r4, [r6, #4]
 8000fa4:	f1b8 0f02 	cmp.w	r8, #2
 8000fa8:	d006      	beq.n	8000fb8 <setvbuf+0x38>
 8000faa:	f1b8 0f01 	cmp.w	r8, #1
 8000fae:	f200 8089 	bhi.w	80010c4 <setvbuf+0x144>
 8000fb2:	2d00      	cmp	r5, #0
 8000fb4:	f2c0 8086 	blt.w	80010c4 <setvbuf+0x144>
 8000fb8:	4621      	mov	r1, r4
 8000fba:	4630      	mov	r0, r6
 8000fbc:	f000 f916 	bl	80011ec <_fflush_r>
 8000fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fc2:	b141      	cbz	r1, 8000fd6 <setvbuf+0x56>
 8000fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d002      	beq.n	8000fd2 <setvbuf+0x52>
 8000fcc:	4630      	mov	r0, r6
 8000fce:	f000 fa75 	bl	80014bc <_free_r>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61a3      	str	r3, [r4, #24]
 8000fda:	6063      	str	r3, [r4, #4]
 8000fdc:	89a3      	ldrh	r3, [r4, #12]
 8000fde:	061b      	lsls	r3, r3, #24
 8000fe0:	d503      	bpl.n	8000fea <setvbuf+0x6a>
 8000fe2:	6921      	ldr	r1, [r4, #16]
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	f000 fa69 	bl	80014bc <_free_r>
 8000fea:	89a3      	ldrh	r3, [r4, #12]
 8000fec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8000ff0:	f023 0303 	bic.w	r3, r3, #3
 8000ff4:	f1b8 0f02 	cmp.w	r8, #2
 8000ff8:	81a3      	strh	r3, [r4, #12]
 8000ffa:	d05d      	beq.n	80010b8 <setvbuf+0x138>
 8000ffc:	ab01      	add	r3, sp, #4
 8000ffe:	466a      	mov	r2, sp
 8001000:	4621      	mov	r1, r4
 8001002:	4630      	mov	r0, r6
 8001004:	f000 f9e6 	bl	80013d4 <__swhatbuf_r>
 8001008:	89a3      	ldrh	r3, [r4, #12]
 800100a:	4318      	orrs	r0, r3
 800100c:	81a0      	strh	r0, [r4, #12]
 800100e:	bb2d      	cbnz	r5, 800105c <setvbuf+0xdc>
 8001010:	9d00      	ldr	r5, [sp, #0]
 8001012:	4628      	mov	r0, r5
 8001014:	f000 fa42 	bl	800149c <malloc>
 8001018:	4607      	mov	r7, r0
 800101a:	2800      	cmp	r0, #0
 800101c:	d14e      	bne.n	80010bc <setvbuf+0x13c>
 800101e:	f8dd 9000 	ldr.w	r9, [sp]
 8001022:	45a9      	cmp	r9, r5
 8001024:	d13c      	bne.n	80010a0 <setvbuf+0x120>
 8001026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102a:	89a3      	ldrh	r3, [r4, #12]
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	81a3      	strh	r3, [r4, #12]
 8001032:	2300      	movs	r3, #0
 8001034:	60a3      	str	r3, [r4, #8]
 8001036:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800103a:	6023      	str	r3, [r4, #0]
 800103c:	6123      	str	r3, [r4, #16]
 800103e:	2301      	movs	r3, #1
 8001040:	6163      	str	r3, [r4, #20]
 8001042:	b003      	add	sp, #12
 8001044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <setvbuf+0x154>)
 800104a:	429c      	cmp	r4, r3
 800104c:	d101      	bne.n	8001052 <setvbuf+0xd2>
 800104e:	68b4      	ldr	r4, [r6, #8]
 8001050:	e7a8      	b.n	8000fa4 <setvbuf+0x24>
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <setvbuf+0x158>)
 8001054:	429c      	cmp	r4, r3
 8001056:	bf08      	it	eq
 8001058:	68f4      	ldreq	r4, [r6, #12]
 800105a:	e7a3      	b.n	8000fa4 <setvbuf+0x24>
 800105c:	2f00      	cmp	r7, #0
 800105e:	d0d8      	beq.n	8001012 <setvbuf+0x92>
 8001060:	69b3      	ldr	r3, [r6, #24]
 8001062:	b913      	cbnz	r3, 800106a <setvbuf+0xea>
 8001064:	4630      	mov	r0, r6
 8001066:	f000 f92b 	bl	80012c0 <__sinit>
 800106a:	f1b8 0f01 	cmp.w	r8, #1
 800106e:	bf08      	it	eq
 8001070:	89a3      	ldrheq	r3, [r4, #12]
 8001072:	6027      	str	r7, [r4, #0]
 8001074:	bf04      	itt	eq
 8001076:	f043 0301 	orreq.w	r3, r3, #1
 800107a:	81a3      	strheq	r3, [r4, #12]
 800107c:	89a3      	ldrh	r3, [r4, #12]
 800107e:	6127      	str	r7, [r4, #16]
 8001080:	f013 0008 	ands.w	r0, r3, #8
 8001084:	6165      	str	r5, [r4, #20]
 8001086:	d01b      	beq.n	80010c0 <setvbuf+0x140>
 8001088:	f013 0001 	ands.w	r0, r3, #1
 800108c:	bf18      	it	ne
 800108e:	426d      	negne	r5, r5
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	bf1d      	ittte	ne
 8001096:	60a3      	strne	r3, [r4, #8]
 8001098:	61a5      	strne	r5, [r4, #24]
 800109a:	4618      	movne	r0, r3
 800109c:	60a5      	streq	r5, [r4, #8]
 800109e:	e7d0      	b.n	8001042 <setvbuf+0xc2>
 80010a0:	4648      	mov	r0, r9
 80010a2:	f000 f9fb 	bl	800149c <malloc>
 80010a6:	4607      	mov	r7, r0
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d0bc      	beq.n	8001026 <setvbuf+0xa6>
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b2:	81a3      	strh	r3, [r4, #12]
 80010b4:	464d      	mov	r5, r9
 80010b6:	e7d3      	b.n	8001060 <setvbuf+0xe0>
 80010b8:	2000      	movs	r0, #0
 80010ba:	e7b6      	b.n	800102a <setvbuf+0xaa>
 80010bc:	46a9      	mov	r9, r5
 80010be:	e7f5      	b.n	80010ac <setvbuf+0x12c>
 80010c0:	60a0      	str	r0, [r4, #8]
 80010c2:	e7be      	b.n	8001042 <setvbuf+0xc2>
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c8:	e7bb      	b.n	8001042 <setvbuf+0xc2>
 80010ca:	bf00      	nop
 80010cc:	20000004 	.word	0x20000004
 80010d0:	080019fc 	.word	0x080019fc
 80010d4:	08001a1c 	.word	0x08001a1c
 80010d8:	080019dc 	.word	0x080019dc

080010dc <__sflush_r>:
 80010dc:	898a      	ldrh	r2, [r1, #12]
 80010de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010e2:	4605      	mov	r5, r0
 80010e4:	0710      	lsls	r0, r2, #28
 80010e6:	460c      	mov	r4, r1
 80010e8:	d45a      	bmi.n	80011a0 <__sflush_r+0xc4>
 80010ea:	684b      	ldr	r3, [r1, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dc05      	bgt.n	80010fc <__sflush_r+0x20>
 80010f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dc02      	bgt.n	80010fc <__sflush_r+0x20>
 80010f6:	2000      	movs	r0, #0
 80010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010fe:	2e00      	cmp	r6, #0
 8001100:	d0f9      	beq.n	80010f6 <__sflush_r+0x1a>
 8001102:	2300      	movs	r3, #0
 8001104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001108:	682f      	ldr	r7, [r5, #0]
 800110a:	602b      	str	r3, [r5, #0]
 800110c:	d033      	beq.n	8001176 <__sflush_r+0x9a>
 800110e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001110:	89a3      	ldrh	r3, [r4, #12]
 8001112:	075a      	lsls	r2, r3, #29
 8001114:	d505      	bpl.n	8001122 <__sflush_r+0x46>
 8001116:	6863      	ldr	r3, [r4, #4]
 8001118:	1ac0      	subs	r0, r0, r3
 800111a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800111c:	b10b      	cbz	r3, 8001122 <__sflush_r+0x46>
 800111e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001120:	1ac0      	subs	r0, r0, r3
 8001122:	2300      	movs	r3, #0
 8001124:	4602      	mov	r2, r0
 8001126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001128:	6a21      	ldr	r1, [r4, #32]
 800112a:	4628      	mov	r0, r5
 800112c:	47b0      	blx	r6
 800112e:	1c43      	adds	r3, r0, #1
 8001130:	89a3      	ldrh	r3, [r4, #12]
 8001132:	d106      	bne.n	8001142 <__sflush_r+0x66>
 8001134:	6829      	ldr	r1, [r5, #0]
 8001136:	291d      	cmp	r1, #29
 8001138:	d84b      	bhi.n	80011d2 <__sflush_r+0xf6>
 800113a:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <__sflush_r+0x10c>)
 800113c:	40ca      	lsrs	r2, r1
 800113e:	07d6      	lsls	r6, r2, #31
 8001140:	d547      	bpl.n	80011d2 <__sflush_r+0xf6>
 8001142:	2200      	movs	r2, #0
 8001144:	6062      	str	r2, [r4, #4]
 8001146:	04d9      	lsls	r1, r3, #19
 8001148:	6922      	ldr	r2, [r4, #16]
 800114a:	6022      	str	r2, [r4, #0]
 800114c:	d504      	bpl.n	8001158 <__sflush_r+0x7c>
 800114e:	1c42      	adds	r2, r0, #1
 8001150:	d101      	bne.n	8001156 <__sflush_r+0x7a>
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	b903      	cbnz	r3, 8001158 <__sflush_r+0x7c>
 8001156:	6560      	str	r0, [r4, #84]	; 0x54
 8001158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800115a:	602f      	str	r7, [r5, #0]
 800115c:	2900      	cmp	r1, #0
 800115e:	d0ca      	beq.n	80010f6 <__sflush_r+0x1a>
 8001160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001164:	4299      	cmp	r1, r3
 8001166:	d002      	beq.n	800116e <__sflush_r+0x92>
 8001168:	4628      	mov	r0, r5
 800116a:	f000 f9a7 	bl	80014bc <_free_r>
 800116e:	2000      	movs	r0, #0
 8001170:	6360      	str	r0, [r4, #52]	; 0x34
 8001172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001176:	6a21      	ldr	r1, [r4, #32]
 8001178:	2301      	movs	r3, #1
 800117a:	4628      	mov	r0, r5
 800117c:	47b0      	blx	r6
 800117e:	1c41      	adds	r1, r0, #1
 8001180:	d1c6      	bne.n	8001110 <__sflush_r+0x34>
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0c3      	beq.n	8001110 <__sflush_r+0x34>
 8001188:	2b1d      	cmp	r3, #29
 800118a:	d001      	beq.n	8001190 <__sflush_r+0xb4>
 800118c:	2b16      	cmp	r3, #22
 800118e:	d101      	bne.n	8001194 <__sflush_r+0xb8>
 8001190:	602f      	str	r7, [r5, #0]
 8001192:	e7b0      	b.n	80010f6 <__sflush_r+0x1a>
 8001194:	89a3      	ldrh	r3, [r4, #12]
 8001196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119a:	81a3      	strh	r3, [r4, #12]
 800119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a0:	690f      	ldr	r7, [r1, #16]
 80011a2:	2f00      	cmp	r7, #0
 80011a4:	d0a7      	beq.n	80010f6 <__sflush_r+0x1a>
 80011a6:	0793      	lsls	r3, r2, #30
 80011a8:	680e      	ldr	r6, [r1, #0]
 80011aa:	bf08      	it	eq
 80011ac:	694b      	ldreq	r3, [r1, #20]
 80011ae:	600f      	str	r7, [r1, #0]
 80011b0:	bf18      	it	ne
 80011b2:	2300      	movne	r3, #0
 80011b4:	eba6 0807 	sub.w	r8, r6, r7
 80011b8:	608b      	str	r3, [r1, #8]
 80011ba:	f1b8 0f00 	cmp.w	r8, #0
 80011be:	dd9a      	ble.n	80010f6 <__sflush_r+0x1a>
 80011c0:	4643      	mov	r3, r8
 80011c2:	463a      	mov	r2, r7
 80011c4:	6a21      	ldr	r1, [r4, #32]
 80011c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80011c8:	4628      	mov	r0, r5
 80011ca:	47b0      	blx	r6
 80011cc:	2800      	cmp	r0, #0
 80011ce:	dc07      	bgt.n	80011e0 <__sflush_r+0x104>
 80011d0:	89a3      	ldrh	r3, [r4, #12]
 80011d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d6:	81a3      	strh	r3, [r4, #12]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011e0:	4407      	add	r7, r0
 80011e2:	eba8 0800 	sub.w	r8, r8, r0
 80011e6:	e7e8      	b.n	80011ba <__sflush_r+0xde>
 80011e8:	20400001 	.word	0x20400001

080011ec <_fflush_r>:
 80011ec:	b538      	push	{r3, r4, r5, lr}
 80011ee:	690b      	ldr	r3, [r1, #16]
 80011f0:	4605      	mov	r5, r0
 80011f2:	460c      	mov	r4, r1
 80011f4:	b1db      	cbz	r3, 800122e <_fflush_r+0x42>
 80011f6:	b118      	cbz	r0, 8001200 <_fflush_r+0x14>
 80011f8:	6983      	ldr	r3, [r0, #24]
 80011fa:	b90b      	cbnz	r3, 8001200 <_fflush_r+0x14>
 80011fc:	f000 f860 	bl	80012c0 <__sinit>
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <_fflush_r+0x48>)
 8001202:	429c      	cmp	r4, r3
 8001204:	d109      	bne.n	800121a <_fflush_r+0x2e>
 8001206:	686c      	ldr	r4, [r5, #4]
 8001208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800120c:	b17b      	cbz	r3, 800122e <_fflush_r+0x42>
 800120e:	4621      	mov	r1, r4
 8001210:	4628      	mov	r0, r5
 8001212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001216:	f7ff bf61 	b.w	80010dc <__sflush_r>
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <_fflush_r+0x4c>)
 800121c:	429c      	cmp	r4, r3
 800121e:	d101      	bne.n	8001224 <_fflush_r+0x38>
 8001220:	68ac      	ldr	r4, [r5, #8]
 8001222:	e7f1      	b.n	8001208 <_fflush_r+0x1c>
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <_fflush_r+0x50>)
 8001226:	429c      	cmp	r4, r3
 8001228:	bf08      	it	eq
 800122a:	68ec      	ldreq	r4, [r5, #12]
 800122c:	e7ec      	b.n	8001208 <_fflush_r+0x1c>
 800122e:	2000      	movs	r0, #0
 8001230:	bd38      	pop	{r3, r4, r5, pc}
 8001232:	bf00      	nop
 8001234:	080019fc 	.word	0x080019fc
 8001238:	08001a1c 	.word	0x08001a1c
 800123c:	080019dc 	.word	0x080019dc

08001240 <_cleanup_r>:
 8001240:	4901      	ldr	r1, [pc, #4]	; (8001248 <_cleanup_r+0x8>)
 8001242:	f000 b8a9 	b.w	8001398 <_fwalk_reent>
 8001246:	bf00      	nop
 8001248:	080011ed 	.word	0x080011ed

0800124c <std.isra.0>:
 800124c:	2300      	movs	r3, #0
 800124e:	b510      	push	{r4, lr}
 8001250:	4604      	mov	r4, r0
 8001252:	6003      	str	r3, [r0, #0]
 8001254:	6043      	str	r3, [r0, #4]
 8001256:	6083      	str	r3, [r0, #8]
 8001258:	8181      	strh	r1, [r0, #12]
 800125a:	6643      	str	r3, [r0, #100]	; 0x64
 800125c:	81c2      	strh	r2, [r0, #14]
 800125e:	6103      	str	r3, [r0, #16]
 8001260:	6143      	str	r3, [r0, #20]
 8001262:	6183      	str	r3, [r0, #24]
 8001264:	4619      	mov	r1, r3
 8001266:	2208      	movs	r2, #8
 8001268:	305c      	adds	r0, #92	; 0x5c
 800126a:	f000 f91f 	bl	80014ac <memset>
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <std.isra.0+0x38>)
 8001270:	6263      	str	r3, [r4, #36]	; 0x24
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <std.isra.0+0x3c>)
 8001274:	62a3      	str	r3, [r4, #40]	; 0x28
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <std.isra.0+0x40>)
 8001278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <std.isra.0+0x44>)
 800127c:	6224      	str	r4, [r4, #32]
 800127e:	6323      	str	r3, [r4, #48]	; 0x30
 8001280:	bd10      	pop	{r4, pc}
 8001282:	bf00      	nop
 8001284:	080016a1 	.word	0x080016a1
 8001288:	080016c3 	.word	0x080016c3
 800128c:	080016fb 	.word	0x080016fb
 8001290:	0800171f 	.word	0x0800171f

08001294 <__sfmoreglue>:
 8001294:	b570      	push	{r4, r5, r6, lr}
 8001296:	1e4a      	subs	r2, r1, #1
 8001298:	2568      	movs	r5, #104	; 0x68
 800129a:	4355      	muls	r5, r2
 800129c:	460e      	mov	r6, r1
 800129e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80012a2:	f000 f959 	bl	8001558 <_malloc_r>
 80012a6:	4604      	mov	r4, r0
 80012a8:	b140      	cbz	r0, 80012bc <__sfmoreglue+0x28>
 80012aa:	2100      	movs	r1, #0
 80012ac:	e880 0042 	stmia.w	r0, {r1, r6}
 80012b0:	300c      	adds	r0, #12
 80012b2:	60a0      	str	r0, [r4, #8]
 80012b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80012b8:	f000 f8f8 	bl	80014ac <memset>
 80012bc:	4620      	mov	r0, r4
 80012be:	bd70      	pop	{r4, r5, r6, pc}

080012c0 <__sinit>:
 80012c0:	6983      	ldr	r3, [r0, #24]
 80012c2:	b510      	push	{r4, lr}
 80012c4:	4604      	mov	r4, r0
 80012c6:	bb33      	cbnz	r3, 8001316 <__sinit+0x56>
 80012c8:	6483      	str	r3, [r0, #72]	; 0x48
 80012ca:	64c3      	str	r3, [r0, #76]	; 0x4c
 80012cc:	6503      	str	r3, [r0, #80]	; 0x50
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <__sinit+0x58>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <__sinit+0x5c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6282      	str	r2, [r0, #40]	; 0x28
 80012d6:	4298      	cmp	r0, r3
 80012d8:	bf04      	itt	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	6183      	streq	r3, [r0, #24]
 80012de:	f000 f81f 	bl	8001320 <__sfp>
 80012e2:	6060      	str	r0, [r4, #4]
 80012e4:	4620      	mov	r0, r4
 80012e6:	f000 f81b 	bl	8001320 <__sfp>
 80012ea:	60a0      	str	r0, [r4, #8]
 80012ec:	4620      	mov	r0, r4
 80012ee:	f000 f817 	bl	8001320 <__sfp>
 80012f2:	2200      	movs	r2, #0
 80012f4:	60e0      	str	r0, [r4, #12]
 80012f6:	2104      	movs	r1, #4
 80012f8:	6860      	ldr	r0, [r4, #4]
 80012fa:	f7ff ffa7 	bl	800124c <std.isra.0>
 80012fe:	2201      	movs	r2, #1
 8001300:	2109      	movs	r1, #9
 8001302:	68a0      	ldr	r0, [r4, #8]
 8001304:	f7ff ffa2 	bl	800124c <std.isra.0>
 8001308:	2202      	movs	r2, #2
 800130a:	2112      	movs	r1, #18
 800130c:	68e0      	ldr	r0, [r4, #12]
 800130e:	f7ff ff9d 	bl	800124c <std.isra.0>
 8001312:	2301      	movs	r3, #1
 8001314:	61a3      	str	r3, [r4, #24]
 8001316:	bd10      	pop	{r4, pc}
 8001318:	080019d8 	.word	0x080019d8
 800131c:	08001241 	.word	0x08001241

08001320 <__sfp>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <__sfp+0x74>)
 8001324:	681e      	ldr	r6, [r3, #0]
 8001326:	69b3      	ldr	r3, [r6, #24]
 8001328:	4607      	mov	r7, r0
 800132a:	b913      	cbnz	r3, 8001332 <__sfp+0x12>
 800132c:	4630      	mov	r0, r6
 800132e:	f7ff ffc7 	bl	80012c0 <__sinit>
 8001332:	3648      	adds	r6, #72	; 0x48
 8001334:	68b4      	ldr	r4, [r6, #8]
 8001336:	6873      	ldr	r3, [r6, #4]
 8001338:	3b01      	subs	r3, #1
 800133a:	d503      	bpl.n	8001344 <__sfp+0x24>
 800133c:	6833      	ldr	r3, [r6, #0]
 800133e:	b133      	cbz	r3, 800134e <__sfp+0x2e>
 8001340:	6836      	ldr	r6, [r6, #0]
 8001342:	e7f7      	b.n	8001334 <__sfp+0x14>
 8001344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001348:	b16d      	cbz	r5, 8001366 <__sfp+0x46>
 800134a:	3468      	adds	r4, #104	; 0x68
 800134c:	e7f4      	b.n	8001338 <__sfp+0x18>
 800134e:	2104      	movs	r1, #4
 8001350:	4638      	mov	r0, r7
 8001352:	f7ff ff9f 	bl	8001294 <__sfmoreglue>
 8001356:	6030      	str	r0, [r6, #0]
 8001358:	2800      	cmp	r0, #0
 800135a:	d1f1      	bne.n	8001340 <__sfp+0x20>
 800135c:	230c      	movs	r3, #12
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	4604      	mov	r4, r0
 8001362:	4620      	mov	r0, r4
 8001364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800136a:	81e3      	strh	r3, [r4, #14]
 800136c:	2301      	movs	r3, #1
 800136e:	81a3      	strh	r3, [r4, #12]
 8001370:	6665      	str	r5, [r4, #100]	; 0x64
 8001372:	6025      	str	r5, [r4, #0]
 8001374:	60a5      	str	r5, [r4, #8]
 8001376:	6065      	str	r5, [r4, #4]
 8001378:	6125      	str	r5, [r4, #16]
 800137a:	6165      	str	r5, [r4, #20]
 800137c:	61a5      	str	r5, [r4, #24]
 800137e:	2208      	movs	r2, #8
 8001380:	4629      	mov	r1, r5
 8001382:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001386:	f000 f891 	bl	80014ac <memset>
 800138a:	6365      	str	r5, [r4, #52]	; 0x34
 800138c:	63a5      	str	r5, [r4, #56]	; 0x38
 800138e:	64a5      	str	r5, [r4, #72]	; 0x48
 8001390:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001392:	e7e6      	b.n	8001362 <__sfp+0x42>
 8001394:	080019d8 	.word	0x080019d8

08001398 <_fwalk_reent>:
 8001398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800139c:	4680      	mov	r8, r0
 800139e:	4689      	mov	r9, r1
 80013a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80013a4:	2600      	movs	r6, #0
 80013a6:	b914      	cbnz	r4, 80013ae <_fwalk_reent+0x16>
 80013a8:	4630      	mov	r0, r6
 80013aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013ae:	68a5      	ldr	r5, [r4, #8]
 80013b0:	6867      	ldr	r7, [r4, #4]
 80013b2:	3f01      	subs	r7, #1
 80013b4:	d501      	bpl.n	80013ba <_fwalk_reent+0x22>
 80013b6:	6824      	ldr	r4, [r4, #0]
 80013b8:	e7f5      	b.n	80013a6 <_fwalk_reent+0xe>
 80013ba:	89ab      	ldrh	r3, [r5, #12]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d907      	bls.n	80013d0 <_fwalk_reent+0x38>
 80013c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013c4:	3301      	adds	r3, #1
 80013c6:	d003      	beq.n	80013d0 <_fwalk_reent+0x38>
 80013c8:	4629      	mov	r1, r5
 80013ca:	4640      	mov	r0, r8
 80013cc:	47c8      	blx	r9
 80013ce:	4306      	orrs	r6, r0
 80013d0:	3568      	adds	r5, #104	; 0x68
 80013d2:	e7ee      	b.n	80013b2 <_fwalk_reent+0x1a>

080013d4 <__swhatbuf_r>:
 80013d4:	b570      	push	{r4, r5, r6, lr}
 80013d6:	460e      	mov	r6, r1
 80013d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013dc:	2900      	cmp	r1, #0
 80013de:	b090      	sub	sp, #64	; 0x40
 80013e0:	4614      	mov	r4, r2
 80013e2:	461d      	mov	r5, r3
 80013e4:	da07      	bge.n	80013f6 <__swhatbuf_r+0x22>
 80013e6:	2300      	movs	r3, #0
 80013e8:	602b      	str	r3, [r5, #0]
 80013ea:	89b3      	ldrh	r3, [r6, #12]
 80013ec:	061a      	lsls	r2, r3, #24
 80013ee:	d410      	bmi.n	8001412 <__swhatbuf_r+0x3e>
 80013f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f4:	e00e      	b.n	8001414 <__swhatbuf_r+0x40>
 80013f6:	aa01      	add	r2, sp, #4
 80013f8:	f000 fa78 	bl	80018ec <_fstat_r>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	dbf2      	blt.n	80013e6 <__swhatbuf_r+0x12>
 8001400:	9a02      	ldr	r2, [sp, #8]
 8001402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800140a:	425a      	negs	r2, r3
 800140c:	415a      	adcs	r2, r3
 800140e:	602a      	str	r2, [r5, #0]
 8001410:	e7ee      	b.n	80013f0 <__swhatbuf_r+0x1c>
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	2000      	movs	r0, #0
 8001416:	6023      	str	r3, [r4, #0]
 8001418:	b010      	add	sp, #64	; 0x40
 800141a:	bd70      	pop	{r4, r5, r6, pc}

0800141c <__smakebuf_r>:
 800141c:	898b      	ldrh	r3, [r1, #12]
 800141e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001420:	079d      	lsls	r5, r3, #30
 8001422:	4606      	mov	r6, r0
 8001424:	460c      	mov	r4, r1
 8001426:	d507      	bpl.n	8001438 <__smakebuf_r+0x1c>
 8001428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800142c:	6023      	str	r3, [r4, #0]
 800142e:	6123      	str	r3, [r4, #16]
 8001430:	2301      	movs	r3, #1
 8001432:	6163      	str	r3, [r4, #20]
 8001434:	b002      	add	sp, #8
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	ab01      	add	r3, sp, #4
 800143a:	466a      	mov	r2, sp
 800143c:	f7ff ffca 	bl	80013d4 <__swhatbuf_r>
 8001440:	9900      	ldr	r1, [sp, #0]
 8001442:	4605      	mov	r5, r0
 8001444:	4630      	mov	r0, r6
 8001446:	f000 f887 	bl	8001558 <_malloc_r>
 800144a:	b948      	cbnz	r0, 8001460 <__smakebuf_r+0x44>
 800144c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001450:	059a      	lsls	r2, r3, #22
 8001452:	d4ef      	bmi.n	8001434 <__smakebuf_r+0x18>
 8001454:	f023 0303 	bic.w	r3, r3, #3
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	81a3      	strh	r3, [r4, #12]
 800145e:	e7e3      	b.n	8001428 <__smakebuf_r+0xc>
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <__smakebuf_r+0x7c>)
 8001462:	62b3      	str	r3, [r6, #40]	; 0x28
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	6020      	str	r0, [r4, #0]
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	81a3      	strh	r3, [r4, #12]
 800146e:	9b00      	ldr	r3, [sp, #0]
 8001470:	6163      	str	r3, [r4, #20]
 8001472:	9b01      	ldr	r3, [sp, #4]
 8001474:	6120      	str	r0, [r4, #16]
 8001476:	b15b      	cbz	r3, 8001490 <__smakebuf_r+0x74>
 8001478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800147c:	4630      	mov	r0, r6
 800147e:	f000 fa47 	bl	8001910 <_isatty_r>
 8001482:	b128      	cbz	r0, 8001490 <__smakebuf_r+0x74>
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	81a3      	strh	r3, [r4, #12]
 8001490:	89a3      	ldrh	r3, [r4, #12]
 8001492:	431d      	orrs	r5, r3
 8001494:	81a5      	strh	r5, [r4, #12]
 8001496:	e7cd      	b.n	8001434 <__smakebuf_r+0x18>
 8001498:	08001241 	.word	0x08001241

0800149c <malloc>:
 800149c:	4b02      	ldr	r3, [pc, #8]	; (80014a8 <malloc+0xc>)
 800149e:	4601      	mov	r1, r0
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f000 b859 	b.w	8001558 <_malloc_r>
 80014a6:	bf00      	nop
 80014a8:	20000004 	.word	0x20000004

080014ac <memset>:
 80014ac:	4402      	add	r2, r0
 80014ae:	4603      	mov	r3, r0
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d100      	bne.n	80014b6 <memset+0xa>
 80014b4:	4770      	bx	lr
 80014b6:	f803 1b01 	strb.w	r1, [r3], #1
 80014ba:	e7f9      	b.n	80014b0 <memset+0x4>

080014bc <_free_r>:
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	4605      	mov	r5, r0
 80014c0:	2900      	cmp	r1, #0
 80014c2:	d045      	beq.n	8001550 <_free_r+0x94>
 80014c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014c8:	1f0c      	subs	r4, r1, #4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bfb8      	it	lt
 80014ce:	18e4      	addlt	r4, r4, r3
 80014d0:	f000 fa40 	bl	8001954 <__malloc_lock>
 80014d4:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <_free_r+0x98>)
 80014d6:	6813      	ldr	r3, [r2, #0]
 80014d8:	4610      	mov	r0, r2
 80014da:	b933      	cbnz	r3, 80014ea <_free_r+0x2e>
 80014dc:	6063      	str	r3, [r4, #4]
 80014de:	6014      	str	r4, [r2, #0]
 80014e0:	4628      	mov	r0, r5
 80014e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014e6:	f000 ba36 	b.w	8001956 <__malloc_unlock>
 80014ea:	42a3      	cmp	r3, r4
 80014ec:	d90c      	bls.n	8001508 <_free_r+0x4c>
 80014ee:	6821      	ldr	r1, [r4, #0]
 80014f0:	1862      	adds	r2, r4, r1
 80014f2:	4293      	cmp	r3, r2
 80014f4:	bf04      	itt	eq
 80014f6:	681a      	ldreq	r2, [r3, #0]
 80014f8:	685b      	ldreq	r3, [r3, #4]
 80014fa:	6063      	str	r3, [r4, #4]
 80014fc:	bf04      	itt	eq
 80014fe:	1852      	addeq	r2, r2, r1
 8001500:	6022      	streq	r2, [r4, #0]
 8001502:	6004      	str	r4, [r0, #0]
 8001504:	e7ec      	b.n	80014e0 <_free_r+0x24>
 8001506:	4613      	mov	r3, r2
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	b10a      	cbz	r2, 8001510 <_free_r+0x54>
 800150c:	42a2      	cmp	r2, r4
 800150e:	d9fa      	bls.n	8001506 <_free_r+0x4a>
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	1858      	adds	r0, r3, r1
 8001514:	42a0      	cmp	r0, r4
 8001516:	d10b      	bne.n	8001530 <_free_r+0x74>
 8001518:	6820      	ldr	r0, [r4, #0]
 800151a:	4401      	add	r1, r0
 800151c:	1858      	adds	r0, r3, r1
 800151e:	4282      	cmp	r2, r0
 8001520:	6019      	str	r1, [r3, #0]
 8001522:	d1dd      	bne.n	80014e0 <_free_r+0x24>
 8001524:	6810      	ldr	r0, [r2, #0]
 8001526:	6852      	ldr	r2, [r2, #4]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	4401      	add	r1, r0
 800152c:	6019      	str	r1, [r3, #0]
 800152e:	e7d7      	b.n	80014e0 <_free_r+0x24>
 8001530:	d902      	bls.n	8001538 <_free_r+0x7c>
 8001532:	230c      	movs	r3, #12
 8001534:	602b      	str	r3, [r5, #0]
 8001536:	e7d3      	b.n	80014e0 <_free_r+0x24>
 8001538:	6820      	ldr	r0, [r4, #0]
 800153a:	1821      	adds	r1, r4, r0
 800153c:	428a      	cmp	r2, r1
 800153e:	bf04      	itt	eq
 8001540:	6811      	ldreq	r1, [r2, #0]
 8001542:	6852      	ldreq	r2, [r2, #4]
 8001544:	6062      	str	r2, [r4, #4]
 8001546:	bf04      	itt	eq
 8001548:	1809      	addeq	r1, r1, r0
 800154a:	6021      	streq	r1, [r4, #0]
 800154c:	605c      	str	r4, [r3, #4]
 800154e:	e7c7      	b.n	80014e0 <_free_r+0x24>
 8001550:	bd38      	pop	{r3, r4, r5, pc}
 8001552:	bf00      	nop
 8001554:	2000008c 	.word	0x2000008c

08001558 <_malloc_r>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	1ccd      	adds	r5, r1, #3
 800155c:	f025 0503 	bic.w	r5, r5, #3
 8001560:	3508      	adds	r5, #8
 8001562:	2d0c      	cmp	r5, #12
 8001564:	bf38      	it	cc
 8001566:	250c      	movcc	r5, #12
 8001568:	2d00      	cmp	r5, #0
 800156a:	4606      	mov	r6, r0
 800156c:	db01      	blt.n	8001572 <_malloc_r+0x1a>
 800156e:	42a9      	cmp	r1, r5
 8001570:	d903      	bls.n	800157a <_malloc_r+0x22>
 8001572:	230c      	movs	r3, #12
 8001574:	6033      	str	r3, [r6, #0]
 8001576:	2000      	movs	r0, #0
 8001578:	bd70      	pop	{r4, r5, r6, pc}
 800157a:	f000 f9eb 	bl	8001954 <__malloc_lock>
 800157e:	4a23      	ldr	r2, [pc, #140]	; (800160c <_malloc_r+0xb4>)
 8001580:	6814      	ldr	r4, [r2, #0]
 8001582:	4621      	mov	r1, r4
 8001584:	b991      	cbnz	r1, 80015ac <_malloc_r+0x54>
 8001586:	4c22      	ldr	r4, [pc, #136]	; (8001610 <_malloc_r+0xb8>)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	b91b      	cbnz	r3, 8001594 <_malloc_r+0x3c>
 800158c:	4630      	mov	r0, r6
 800158e:	f000 f877 	bl	8001680 <_sbrk_r>
 8001592:	6020      	str	r0, [r4, #0]
 8001594:	4629      	mov	r1, r5
 8001596:	4630      	mov	r0, r6
 8001598:	f000 f872 	bl	8001680 <_sbrk_r>
 800159c:	1c43      	adds	r3, r0, #1
 800159e:	d126      	bne.n	80015ee <_malloc_r+0x96>
 80015a0:	230c      	movs	r3, #12
 80015a2:	6033      	str	r3, [r6, #0]
 80015a4:	4630      	mov	r0, r6
 80015a6:	f000 f9d6 	bl	8001956 <__malloc_unlock>
 80015aa:	e7e4      	b.n	8001576 <_malloc_r+0x1e>
 80015ac:	680b      	ldr	r3, [r1, #0]
 80015ae:	1b5b      	subs	r3, r3, r5
 80015b0:	d41a      	bmi.n	80015e8 <_malloc_r+0x90>
 80015b2:	2b0b      	cmp	r3, #11
 80015b4:	d90f      	bls.n	80015d6 <_malloc_r+0x7e>
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	50cd      	str	r5, [r1, r3]
 80015ba:	18cc      	adds	r4, r1, r3
 80015bc:	4630      	mov	r0, r6
 80015be:	f000 f9ca 	bl	8001956 <__malloc_unlock>
 80015c2:	f104 000b 	add.w	r0, r4, #11
 80015c6:	1d23      	adds	r3, r4, #4
 80015c8:	f020 0007 	bic.w	r0, r0, #7
 80015cc:	1ac3      	subs	r3, r0, r3
 80015ce:	d01b      	beq.n	8001608 <_malloc_r+0xb0>
 80015d0:	425a      	negs	r2, r3
 80015d2:	50e2      	str	r2, [r4, r3]
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
 80015d6:	428c      	cmp	r4, r1
 80015d8:	bf0d      	iteet	eq
 80015da:	6863      	ldreq	r3, [r4, #4]
 80015dc:	684b      	ldrne	r3, [r1, #4]
 80015de:	6063      	strne	r3, [r4, #4]
 80015e0:	6013      	streq	r3, [r2, #0]
 80015e2:	bf18      	it	ne
 80015e4:	460c      	movne	r4, r1
 80015e6:	e7e9      	b.n	80015bc <_malloc_r+0x64>
 80015e8:	460c      	mov	r4, r1
 80015ea:	6849      	ldr	r1, [r1, #4]
 80015ec:	e7ca      	b.n	8001584 <_malloc_r+0x2c>
 80015ee:	1cc4      	adds	r4, r0, #3
 80015f0:	f024 0403 	bic.w	r4, r4, #3
 80015f4:	42a0      	cmp	r0, r4
 80015f6:	d005      	beq.n	8001604 <_malloc_r+0xac>
 80015f8:	1a21      	subs	r1, r4, r0
 80015fa:	4630      	mov	r0, r6
 80015fc:	f000 f840 	bl	8001680 <_sbrk_r>
 8001600:	3001      	adds	r0, #1
 8001602:	d0cd      	beq.n	80015a0 <_malloc_r+0x48>
 8001604:	6025      	str	r5, [r4, #0]
 8001606:	e7d9      	b.n	80015bc <_malloc_r+0x64>
 8001608:	bd70      	pop	{r4, r5, r6, pc}
 800160a:	bf00      	nop
 800160c:	2000008c 	.word	0x2000008c
 8001610:	20000090 	.word	0x20000090

08001614 <_putc_r>:
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	460d      	mov	r5, r1
 8001618:	4614      	mov	r4, r2
 800161a:	4606      	mov	r6, r0
 800161c:	b118      	cbz	r0, 8001626 <_putc_r+0x12>
 800161e:	6983      	ldr	r3, [r0, #24]
 8001620:	b90b      	cbnz	r3, 8001626 <_putc_r+0x12>
 8001622:	f7ff fe4d 	bl	80012c0 <__sinit>
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <_putc_r+0x60>)
 8001628:	429c      	cmp	r4, r3
 800162a:	d112      	bne.n	8001652 <_putc_r+0x3e>
 800162c:	6874      	ldr	r4, [r6, #4]
 800162e:	68a3      	ldr	r3, [r4, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	60a3      	str	r3, [r4, #8]
 8001636:	da16      	bge.n	8001666 <_putc_r+0x52>
 8001638:	69a2      	ldr	r2, [r4, #24]
 800163a:	4293      	cmp	r3, r2
 800163c:	db02      	blt.n	8001644 <_putc_r+0x30>
 800163e:	b2eb      	uxtb	r3, r5
 8001640:	2b0a      	cmp	r3, #10
 8001642:	d110      	bne.n	8001666 <_putc_r+0x52>
 8001644:	4622      	mov	r2, r4
 8001646:	4629      	mov	r1, r5
 8001648:	4630      	mov	r0, r6
 800164a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800164e:	f000 b86b 	b.w	8001728 <__swbuf_r>
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <_putc_r+0x64>)
 8001654:	429c      	cmp	r4, r3
 8001656:	d101      	bne.n	800165c <_putc_r+0x48>
 8001658:	68b4      	ldr	r4, [r6, #8]
 800165a:	e7e8      	b.n	800162e <_putc_r+0x1a>
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_putc_r+0x68>)
 800165e:	429c      	cmp	r4, r3
 8001660:	bf08      	it	eq
 8001662:	68f4      	ldreq	r4, [r6, #12]
 8001664:	e7e3      	b.n	800162e <_putc_r+0x1a>
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	6022      	str	r2, [r4, #0]
 800166c:	701d      	strb	r5, [r3, #0]
 800166e:	b2e8      	uxtb	r0, r5
 8001670:	bd70      	pop	{r4, r5, r6, pc}
 8001672:	bf00      	nop
 8001674:	080019fc 	.word	0x080019fc
 8001678:	08001a1c 	.word	0x08001a1c
 800167c:	080019dc 	.word	0x080019dc

08001680 <_sbrk_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4c06      	ldr	r4, [pc, #24]	; (800169c <_sbrk_r+0x1c>)
 8001684:	2300      	movs	r3, #0
 8001686:	4605      	mov	r5, r0
 8001688:	4608      	mov	r0, r1
 800168a:	6023      	str	r3, [r4, #0]
 800168c:	f7ff f968 	bl	8000960 <_sbrk>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d102      	bne.n	800169a <_sbrk_r+0x1a>
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	b103      	cbz	r3, 800169a <_sbrk_r+0x1a>
 8001698:	602b      	str	r3, [r5, #0]
 800169a:	bd38      	pop	{r3, r4, r5, pc}
 800169c:	20000094 	.word	0x20000094

080016a0 <__sread>:
 80016a0:	b510      	push	{r4, lr}
 80016a2:	460c      	mov	r4, r1
 80016a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a8:	f000 f956 	bl	8001958 <_read_r>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	bfab      	itete	ge
 80016b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80016b2:	89a3      	ldrhlt	r3, [r4, #12]
 80016b4:	181b      	addge	r3, r3, r0
 80016b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80016ba:	bfac      	ite	ge
 80016bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80016be:	81a3      	strhlt	r3, [r4, #12]
 80016c0:	bd10      	pop	{r4, pc}

080016c2 <__swrite>:
 80016c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c6:	461f      	mov	r7, r3
 80016c8:	898b      	ldrh	r3, [r1, #12]
 80016ca:	05db      	lsls	r3, r3, #23
 80016cc:	4605      	mov	r5, r0
 80016ce:	460c      	mov	r4, r1
 80016d0:	4616      	mov	r6, r2
 80016d2:	d505      	bpl.n	80016e0 <__swrite+0x1e>
 80016d4:	2302      	movs	r3, #2
 80016d6:	2200      	movs	r2, #0
 80016d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016dc:	f000 f928 	bl	8001930 <_lseek_r>
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ea:	81a3      	strh	r3, [r4, #12]
 80016ec:	4632      	mov	r2, r6
 80016ee:	463b      	mov	r3, r7
 80016f0:	4628      	mov	r0, r5
 80016f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016f6:	f000 b869 	b.w	80017cc <_write_r>

080016fa <__sseek>:
 80016fa:	b510      	push	{r4, lr}
 80016fc:	460c      	mov	r4, r1
 80016fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001702:	f000 f915 	bl	8001930 <_lseek_r>
 8001706:	1c43      	adds	r3, r0, #1
 8001708:	89a3      	ldrh	r3, [r4, #12]
 800170a:	bf15      	itete	ne
 800170c:	6560      	strne	r0, [r4, #84]	; 0x54
 800170e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001716:	81a3      	strheq	r3, [r4, #12]
 8001718:	bf18      	it	ne
 800171a:	81a3      	strhne	r3, [r4, #12]
 800171c:	bd10      	pop	{r4, pc}

0800171e <__sclose>:
 800171e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001722:	f000 b8d3 	b.w	80018cc <_close_r>
	...

08001728 <__swbuf_r>:
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	460e      	mov	r6, r1
 800172c:	4614      	mov	r4, r2
 800172e:	4605      	mov	r5, r0
 8001730:	b118      	cbz	r0, 800173a <__swbuf_r+0x12>
 8001732:	6983      	ldr	r3, [r0, #24]
 8001734:	b90b      	cbnz	r3, 800173a <__swbuf_r+0x12>
 8001736:	f7ff fdc3 	bl	80012c0 <__sinit>
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <__swbuf_r+0x98>)
 800173c:	429c      	cmp	r4, r3
 800173e:	d12a      	bne.n	8001796 <__swbuf_r+0x6e>
 8001740:	686c      	ldr	r4, [r5, #4]
 8001742:	69a3      	ldr	r3, [r4, #24]
 8001744:	60a3      	str	r3, [r4, #8]
 8001746:	89a3      	ldrh	r3, [r4, #12]
 8001748:	071a      	lsls	r2, r3, #28
 800174a:	d52e      	bpl.n	80017aa <__swbuf_r+0x82>
 800174c:	6923      	ldr	r3, [r4, #16]
 800174e:	b363      	cbz	r3, 80017aa <__swbuf_r+0x82>
 8001750:	6923      	ldr	r3, [r4, #16]
 8001752:	6820      	ldr	r0, [r4, #0]
 8001754:	1ac0      	subs	r0, r0, r3
 8001756:	6963      	ldr	r3, [r4, #20]
 8001758:	b2f6      	uxtb	r6, r6
 800175a:	4298      	cmp	r0, r3
 800175c:	4637      	mov	r7, r6
 800175e:	db04      	blt.n	800176a <__swbuf_r+0x42>
 8001760:	4621      	mov	r1, r4
 8001762:	4628      	mov	r0, r5
 8001764:	f7ff fd42 	bl	80011ec <_fflush_r>
 8001768:	bb28      	cbnz	r0, 80017b6 <__swbuf_r+0x8e>
 800176a:	68a3      	ldr	r3, [r4, #8]
 800176c:	3b01      	subs	r3, #1
 800176e:	60a3      	str	r3, [r4, #8]
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	6022      	str	r2, [r4, #0]
 8001776:	701e      	strb	r6, [r3, #0]
 8001778:	6963      	ldr	r3, [r4, #20]
 800177a:	3001      	adds	r0, #1
 800177c:	4298      	cmp	r0, r3
 800177e:	d004      	beq.n	800178a <__swbuf_r+0x62>
 8001780:	89a3      	ldrh	r3, [r4, #12]
 8001782:	07db      	lsls	r3, r3, #31
 8001784:	d519      	bpl.n	80017ba <__swbuf_r+0x92>
 8001786:	2e0a      	cmp	r6, #10
 8001788:	d117      	bne.n	80017ba <__swbuf_r+0x92>
 800178a:	4621      	mov	r1, r4
 800178c:	4628      	mov	r0, r5
 800178e:	f7ff fd2d 	bl	80011ec <_fflush_r>
 8001792:	b190      	cbz	r0, 80017ba <__swbuf_r+0x92>
 8001794:	e00f      	b.n	80017b6 <__swbuf_r+0x8e>
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <__swbuf_r+0x9c>)
 8001798:	429c      	cmp	r4, r3
 800179a:	d101      	bne.n	80017a0 <__swbuf_r+0x78>
 800179c:	68ac      	ldr	r4, [r5, #8]
 800179e:	e7d0      	b.n	8001742 <__swbuf_r+0x1a>
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <__swbuf_r+0xa0>)
 80017a2:	429c      	cmp	r4, r3
 80017a4:	bf08      	it	eq
 80017a6:	68ec      	ldreq	r4, [r5, #12]
 80017a8:	e7cb      	b.n	8001742 <__swbuf_r+0x1a>
 80017aa:	4621      	mov	r1, r4
 80017ac:	4628      	mov	r0, r5
 80017ae:	f000 f81f 	bl	80017f0 <__swsetup_r>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d0cc      	beq.n	8001750 <__swbuf_r+0x28>
 80017b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80017ba:	4638      	mov	r0, r7
 80017bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017be:	bf00      	nop
 80017c0:	080019fc 	.word	0x080019fc
 80017c4:	08001a1c 	.word	0x08001a1c
 80017c8:	080019dc 	.word	0x080019dc

080017cc <_write_r>:
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	4c07      	ldr	r4, [pc, #28]	; (80017ec <_write_r+0x20>)
 80017d0:	4605      	mov	r5, r0
 80017d2:	4608      	mov	r0, r1
 80017d4:	4611      	mov	r1, r2
 80017d6:	2200      	movs	r2, #0
 80017d8:	6022      	str	r2, [r4, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	f7ff f888 	bl	80008f0 <_write>
 80017e0:	1c43      	adds	r3, r0, #1
 80017e2:	d102      	bne.n	80017ea <_write_r+0x1e>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	b103      	cbz	r3, 80017ea <_write_r+0x1e>
 80017e8:	602b      	str	r3, [r5, #0]
 80017ea:	bd38      	pop	{r3, r4, r5, pc}
 80017ec:	20000094 	.word	0x20000094

080017f0 <__swsetup_r>:
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <__swsetup_r+0xcc>)
 80017f2:	b570      	push	{r4, r5, r6, lr}
 80017f4:	681d      	ldr	r5, [r3, #0]
 80017f6:	4606      	mov	r6, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	b125      	cbz	r5, 8001806 <__swsetup_r+0x16>
 80017fc:	69ab      	ldr	r3, [r5, #24]
 80017fe:	b913      	cbnz	r3, 8001806 <__swsetup_r+0x16>
 8001800:	4628      	mov	r0, r5
 8001802:	f7ff fd5d 	bl	80012c0 <__sinit>
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <__swsetup_r+0xd0>)
 8001808:	429c      	cmp	r4, r3
 800180a:	d10f      	bne.n	800182c <__swsetup_r+0x3c>
 800180c:	686c      	ldr	r4, [r5, #4]
 800180e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001812:	b29a      	uxth	r2, r3
 8001814:	0715      	lsls	r5, r2, #28
 8001816:	d42c      	bmi.n	8001872 <__swsetup_r+0x82>
 8001818:	06d0      	lsls	r0, r2, #27
 800181a:	d411      	bmi.n	8001840 <__swsetup_r+0x50>
 800181c:	2209      	movs	r2, #9
 800181e:	6032      	str	r2, [r6, #0]
 8001820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001824:	81a3      	strh	r3, [r4, #12]
 8001826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800182a:	bd70      	pop	{r4, r5, r6, pc}
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <__swsetup_r+0xd4>)
 800182e:	429c      	cmp	r4, r3
 8001830:	d101      	bne.n	8001836 <__swsetup_r+0x46>
 8001832:	68ac      	ldr	r4, [r5, #8]
 8001834:	e7eb      	b.n	800180e <__swsetup_r+0x1e>
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <__swsetup_r+0xd8>)
 8001838:	429c      	cmp	r4, r3
 800183a:	bf08      	it	eq
 800183c:	68ec      	ldreq	r4, [r5, #12]
 800183e:	e7e6      	b.n	800180e <__swsetup_r+0x1e>
 8001840:	0751      	lsls	r1, r2, #29
 8001842:	d512      	bpl.n	800186a <__swsetup_r+0x7a>
 8001844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001846:	b141      	cbz	r1, 800185a <__swsetup_r+0x6a>
 8001848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800184c:	4299      	cmp	r1, r3
 800184e:	d002      	beq.n	8001856 <__swsetup_r+0x66>
 8001850:	4630      	mov	r0, r6
 8001852:	f7ff fe33 	bl	80014bc <_free_r>
 8001856:	2300      	movs	r3, #0
 8001858:	6363      	str	r3, [r4, #52]	; 0x34
 800185a:	89a3      	ldrh	r3, [r4, #12]
 800185c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001860:	81a3      	strh	r3, [r4, #12]
 8001862:	2300      	movs	r3, #0
 8001864:	6063      	str	r3, [r4, #4]
 8001866:	6923      	ldr	r3, [r4, #16]
 8001868:	6023      	str	r3, [r4, #0]
 800186a:	89a3      	ldrh	r3, [r4, #12]
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	81a3      	strh	r3, [r4, #12]
 8001872:	6923      	ldr	r3, [r4, #16]
 8001874:	b94b      	cbnz	r3, 800188a <__swsetup_r+0x9a>
 8001876:	89a3      	ldrh	r3, [r4, #12]
 8001878:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800187c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001880:	d003      	beq.n	800188a <__swsetup_r+0x9a>
 8001882:	4621      	mov	r1, r4
 8001884:	4630      	mov	r0, r6
 8001886:	f7ff fdc9 	bl	800141c <__smakebuf_r>
 800188a:	89a2      	ldrh	r2, [r4, #12]
 800188c:	f012 0301 	ands.w	r3, r2, #1
 8001890:	d00c      	beq.n	80018ac <__swsetup_r+0xbc>
 8001892:	2300      	movs	r3, #0
 8001894:	60a3      	str	r3, [r4, #8]
 8001896:	6963      	ldr	r3, [r4, #20]
 8001898:	425b      	negs	r3, r3
 800189a:	61a3      	str	r3, [r4, #24]
 800189c:	6923      	ldr	r3, [r4, #16]
 800189e:	b953      	cbnz	r3, 80018b6 <__swsetup_r+0xc6>
 80018a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80018a8:	d1ba      	bne.n	8001820 <__swsetup_r+0x30>
 80018aa:	bd70      	pop	{r4, r5, r6, pc}
 80018ac:	0792      	lsls	r2, r2, #30
 80018ae:	bf58      	it	pl
 80018b0:	6963      	ldrpl	r3, [r4, #20]
 80018b2:	60a3      	str	r3, [r4, #8]
 80018b4:	e7f2      	b.n	800189c <__swsetup_r+0xac>
 80018b6:	2000      	movs	r0, #0
 80018b8:	e7f7      	b.n	80018aa <__swsetup_r+0xba>
 80018ba:	bf00      	nop
 80018bc:	20000004 	.word	0x20000004
 80018c0:	080019fc 	.word	0x080019fc
 80018c4:	08001a1c 	.word	0x08001a1c
 80018c8:	080019dc 	.word	0x080019dc

080018cc <_close_r>:
 80018cc:	b538      	push	{r3, r4, r5, lr}
 80018ce:	4c06      	ldr	r4, [pc, #24]	; (80018e8 <_close_r+0x1c>)
 80018d0:	2300      	movs	r3, #0
 80018d2:	4605      	mov	r5, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	6023      	str	r3, [r4, #0]
 80018d8:	f7ff f862 	bl	80009a0 <_close>
 80018dc:	1c43      	adds	r3, r0, #1
 80018de:	d102      	bne.n	80018e6 <_close_r+0x1a>
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	b103      	cbz	r3, 80018e6 <_close_r+0x1a>
 80018e4:	602b      	str	r3, [r5, #0]
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	20000094 	.word	0x20000094

080018ec <_fstat_r>:
 80018ec:	b538      	push	{r3, r4, r5, lr}
 80018ee:	4c07      	ldr	r4, [pc, #28]	; (800190c <_fstat_r+0x20>)
 80018f0:	2300      	movs	r3, #0
 80018f2:	4605      	mov	r5, r0
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	6023      	str	r3, [r4, #0]
 80018fa:	f7ff f863 	bl	80009c4 <_fstat>
 80018fe:	1c43      	adds	r3, r0, #1
 8001900:	d102      	bne.n	8001908 <_fstat_r+0x1c>
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	b103      	cbz	r3, 8001908 <_fstat_r+0x1c>
 8001906:	602b      	str	r3, [r5, #0]
 8001908:	bd38      	pop	{r3, r4, r5, pc}
 800190a:	bf00      	nop
 800190c:	20000094 	.word	0x20000094

08001910 <_isatty_r>:
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	4c06      	ldr	r4, [pc, #24]	; (800192c <_isatty_r+0x1c>)
 8001914:	2300      	movs	r3, #0
 8001916:	4605      	mov	r5, r0
 8001918:	4608      	mov	r0, r1
 800191a:	6023      	str	r3, [r4, #0]
 800191c:	f7ff f864 	bl	80009e8 <_isatty>
 8001920:	1c43      	adds	r3, r0, #1
 8001922:	d102      	bne.n	800192a <_isatty_r+0x1a>
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	b103      	cbz	r3, 800192a <_isatty_r+0x1a>
 8001928:	602b      	str	r3, [r5, #0]
 800192a:	bd38      	pop	{r3, r4, r5, pc}
 800192c:	20000094 	.word	0x20000094

08001930 <_lseek_r>:
 8001930:	b538      	push	{r3, r4, r5, lr}
 8001932:	4c07      	ldr	r4, [pc, #28]	; (8001950 <_lseek_r+0x20>)
 8001934:	4605      	mov	r5, r0
 8001936:	4608      	mov	r0, r1
 8001938:	4611      	mov	r1, r2
 800193a:	2200      	movs	r2, #0
 800193c:	6022      	str	r2, [r4, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	f7ff f862 	bl	8000a08 <_lseek>
 8001944:	1c43      	adds	r3, r0, #1
 8001946:	d102      	bne.n	800194e <_lseek_r+0x1e>
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	b103      	cbz	r3, 800194e <_lseek_r+0x1e>
 800194c:	602b      	str	r3, [r5, #0]
 800194e:	bd38      	pop	{r3, r4, r5, pc}
 8001950:	20000094 	.word	0x20000094

08001954 <__malloc_lock>:
 8001954:	4770      	bx	lr

08001956 <__malloc_unlock>:
 8001956:	4770      	bx	lr

08001958 <_read_r>:
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	4c07      	ldr	r4, [pc, #28]	; (8001978 <_read_r+0x20>)
 800195c:	4605      	mov	r5, r0
 800195e:	4608      	mov	r0, r1
 8001960:	4611      	mov	r1, r2
 8001962:	2200      	movs	r2, #0
 8001964:	6022      	str	r2, [r4, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	f7fe ffe4 	bl	8000934 <_read>
 800196c:	1c43      	adds	r3, r0, #1
 800196e:	d102      	bne.n	8001976 <_read_r+0x1e>
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	b103      	cbz	r3, 8001976 <_read_r+0x1e>
 8001974:	602b      	str	r3, [r5, #0]
 8001976:	bd38      	pop	{r3, r4, r5, pc}
 8001978:	20000094 	.word	0x20000094

0800197c <_init>:
 800197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800197e:	bf00      	nop
 8001980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001982:	bc08      	pop	{r3}
 8001984:	469e      	mov	lr, r3
 8001986:	4770      	bx	lr

08001988 <_fini>:
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	bf00      	nop
 800198c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800198e:	bc08      	pop	{r3}
 8001990:	469e      	mov	lr, r3
 8001992:	4770      	bx	lr
