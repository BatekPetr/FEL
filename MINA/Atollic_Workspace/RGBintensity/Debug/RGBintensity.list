
/media/petr/HDD/FEL/MINA/Atollic_Workspace/RGBintensity/Debug/RGBintensity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f14  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010ac  080010ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080010ac  080010ac  000110ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080010b0  080010b0  000110b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080010b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000004  080010b8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000020  080010b8  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000f9d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003f4  00000000  00000000  00020fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000d8  00000000  00000000  000213c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000214a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000007cb  00000000  00000000  00021530  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000545  00000000  00000000  00021cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00022240  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000308  00000000  00000000  000222bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000225c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001094 	.word	0x08001094

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001094 	.word	0x08001094

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <main>:
*/



int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  initRGB_LED_PWM();
 80009b0:	f000 f80a 	bl	80009c8 <initRGB_LED_PWM>
  set_RGB_LED_PWM(125,0,255);
 80009b4:	22ff      	movs	r2, #255	; 0xff
 80009b6:	2100      	movs	r1, #0
 80009b8:	207d      	movs	r0, #125	; 0x7d
 80009ba:	f000 f90d 	bl	8000bd8 <set_RGB_LED_PWM>
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	0000      	movs	r0, r0
	...

080009c8 <initRGB_LED_PWM>:
 */

#include "rgb_led_driver.h"

void initRGB_LED_PWM()
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  uint32_t apb2 = SystemCoreClock; //TODO dopln podle RCC
 80009ce:	4b7a      	ldr	r3, [pc, #488]	; (8000bb8 <initRGB_LED_PWM+0x1f0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	607b      	str	r3, [r7, #4]

  // ----------------------------------------------------
  // BLUE LED
  if (!(RCC->APB2ENR & RCC_APB2ENR_TIM1EN))
 80009d4:	4b79      	ldr	r3, [pc, #484]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 80009d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d111      	bne.n	8000a04 <initRGB_LED_PWM+0x3c>
  {
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80009e0:	4a76      	ldr	r2, [pc, #472]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 80009e2:	4b76      	ldr	r3, [pc, #472]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->APB2RSTR |= RCC_APB2RSTR_TIM1RST;
 80009ec:	4a73      	ldr	r2, [pc, #460]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 80009ee:	4b73      	ldr	r3, [pc, #460]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 80009f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6253      	str	r3, [r2, #36]	; 0x24
    RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM1RST;
 80009f8:	4a70      	ldr	r2, [pc, #448]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 80009fa:	4b70      	ldr	r3, [pc, #448]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 80009fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fe:	f023 0301 	bic.w	r3, r3, #1
 8000a02:	6253      	str	r3, [r2, #36]	; 0x24
  }
  TIM1->CR1 = 0 // DIR = 0 - upcounter
 8000a04:	4b6e      	ldr	r3, [pc, #440]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	601a      	str	r2, [r3, #0]
      | TIM_CR1_ARPE; // bufferovany zapis do ARR
  TIM1->CR2 = 0;
 8000a0a:	4b6d      	ldr	r3, [pc, #436]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  TIM1->PSC = apb2 / 1E6 - 1; // 1MHz - 1us
 8000a10:	4c6b      	ldr	r4, [pc, #428]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fd22 	bl	800045c <__aeabi_ui2d>
 8000a18:	a365      	add	r3, pc, #404	; (adr r3, 8000bb0 <initRGB_LED_PWM+0x1e8>)
 8000a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a1e:	f7ff febd 	bl	800079c <__aeabi_ddiv>
 8000a22:	4602      	mov	r2, r0
 8000a24:	460b      	mov	r3, r1
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 0200 	mov.w	r2, #0
 8000a2e:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <initRGB_LED_PWM+0x1fc>)
 8000a30:	f7ff fbd6 	bl	80001e0 <__aeabi_dsub>
 8000a34:	4602      	mov	r2, r0
 8000a36:	460b      	mov	r3, r1
 8000a38:	4610      	mov	r0, r2
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff ff96 	bl	800096c <__aeabi_d2uiz>
 8000a40:	4603      	mov	r3, r0
 8000a42:	62a3      	str	r3, [r4, #40]	; 0x28
  TIM1->ARR = 256 - 1; // 256us preteceni
 8000a44:	4b5e      	ldr	r3, [pc, #376]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->CR1 = TIM_CR1_CEN;
 8000a4a:	4b5d      	ldr	r3, [pc, #372]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
  TIM1->BDTR |= TIM_BDTR_MOE;
 8000a50:	4a5b      	ldr	r2, [pc, #364]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a52:	4b5b      	ldr	r3, [pc, #364]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a5a:	6453      	str	r3, [r2, #68]	; 0x44
  Nucleo_SetPinGPIO(RGB_BLUE, ioPortAlternatePP); // BLUE
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	2109      	movs	r1, #9
 8000a60:	4859      	ldr	r0, [pc, #356]	; (8000bc8 <initRGB_LED_PWM+0x200>)
 8000a62:	f000 f95b 	bl	8000d1c <Nucleo_SetPinGPIO>
  Nucleo_SetAFGPIO(RGB_BLUE, 1); // AF01 odpovida TIM1_CH2
 8000a66:	2201      	movs	r2, #1
 8000a68:	2109      	movs	r1, #9
 8000a6a:	4857      	ldr	r0, [pc, #348]	; (8000bc8 <initRGB_LED_PWM+0x200>)
 8000a6c:	f000 f905 	bl	8000c7a <Nucleo_SetAFGPIO>

  TIM1->CCMR1 &= ~TIM_CCMR1_OC2M;
 8000a70:	4a53      	ldr	r2, [pc, #332]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a72:	4b53      	ldr	r3, [pc, #332]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a7a:	6193      	str	r3, [r2, #24]
  TIM1->CCMR1 |= TIM_CCMR1_OC2M; //TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; // 110 – PWM 1
 8000a7c:	4a50      	ldr	r2, [pc, #320]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a7e:	4b50      	ldr	r3, [pc, #320]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a86:	6193      	str	r3, [r2, #24]

  TIM1->CCER |= TIM_CCER_CC2E; // povol vystup
 8000a88:	4a4d      	ldr	r2, [pc, #308]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a8a:	4b4d      	ldr	r3, [pc, #308]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6213      	str	r3, [r2, #32]
  TIM1->CCR2 = 0; //TIM1->ARR / 4;
 8000a94:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <initRGB_LED_PWM+0x1f8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	639a      	str	r2, [r3, #56]	; 0x38
  // ------------------------------------------------------

  // RED and GREEN LED
  uint32_t apb1 = SystemCoreClock; //TODO dopln podle RCC
 8000a9a:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <initRGB_LED_PWM+0x1f0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	603b      	str	r3, [r7, #0]

  if (!(RCC->APB1ENR & RCC_APB1ENR_TIM3EN))
 8000aa0:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d111      	bne.n	8000ad0 <initRGB_LED_PWM+0x108>
  {
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000aac:	4a43      	ldr	r2, [pc, #268]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 8000aae:	4b43      	ldr	r3, [pc, #268]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB1RSTR |= RCC_APB1RSTR_TIM3RST;
 8000ab8:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	6213      	str	r3, [r2, #32]
    RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM3RST;
 8000ac4:	4a3d      	ldr	r2, [pc, #244]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <initRGB_LED_PWM+0x1f4>)
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	f023 0302 	bic.w	r3, r3, #2
 8000ace:	6213      	str	r3, [r2, #32]
  }
  TIM3->CR1 = 0 // DIR = 0 - upcounter
 8000ad0:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	601a      	str	r2, [r3, #0]
      | TIM_CR1_ARPE; // bufferovany zapis do ARR
  TIM3->CR2 = 0;
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  TIM3->PSC = apb1 / 1E6 - 1; // 1MHz - 1us
 8000adc:	4c3b      	ldr	r4, [pc, #236]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000ade:	6838      	ldr	r0, [r7, #0]
 8000ae0:	f7ff fcbc 	bl	800045c <__aeabi_ui2d>
 8000ae4:	a332      	add	r3, pc, #200	; (adr r3, 8000bb0 <initRGB_LED_PWM+0x1e8>)
 8000ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aea:	f7ff fe57 	bl	800079c <__aeabi_ddiv>
 8000aee:	4602      	mov	r2, r0
 8000af0:	460b      	mov	r3, r1
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <initRGB_LED_PWM+0x1fc>)
 8000afc:	f7ff fb70 	bl	80001e0 <__aeabi_dsub>
 8000b00:	4602      	mov	r2, r0
 8000b02:	460b      	mov	r3, r1
 8000b04:	4610      	mov	r0, r2
 8000b06:	4619      	mov	r1, r3
 8000b08:	f7ff ff30 	bl	800096c <__aeabi_d2uiz>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	62a3      	str	r3, [r4, #40]	; 0x28
  TIM3->ARR = 256 - 1; // 1kHz - 1ms preteceni
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b12:	22ff      	movs	r2, #255	; 0xff
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CR1 = TIM_CR1_CEN;
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
  TIM3->BDTR |= TIM_BDTR_MOE;
 8000b1c:	4a2b      	ldr	r2, [pc, #172]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44

  // RED LED
  Nucleo_SetPinGPIO(RGB_RED, ioPortAlternatePP);
 8000b28:	2206      	movs	r2, #6
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4828      	ldr	r0, [pc, #160]	; (8000bd0 <initRGB_LED_PWM+0x208>)
 8000b2e:	f000 f8f5 	bl	8000d1c <Nucleo_SetPinGPIO>
  Nucleo_SetAFGPIO(RGB_RED, 2); // AF02 odpovida TIM3_CH1
 8000b32:	2202      	movs	r2, #2
 8000b34:	2104      	movs	r1, #4
 8000b36:	4826      	ldr	r0, [pc, #152]	; (8000bd0 <initRGB_LED_PWM+0x208>)
 8000b38:	f000 f89f 	bl	8000c7a <Nucleo_SetAFGPIO>
  TIM3->CCMR1 &= ~TIM_CCMR1_OC1M;
 8000b3c:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b46:	6193      	str	r3, [r2, #24]
  TIM3->CCMR1 |= TIM_CCMR1_OC1M; //TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; // 110 - PWM 1
 8000b48:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000b52:	6193      	str	r3, [r2, #24]
  TIM3->CCER |= TIM_CCER_CC1E; // povol vystup
 8000b54:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6213      	str	r3, [r2, #32]
  TIM3->CCR1 = 0; //TIM1->ARR / 2;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34

  // GREEN LED
  Nucleo_SetPinGPIO(RGB_GREEN, ioPortAlternatePP); // GREEN
 8000b66:	2206      	movs	r2, #6
 8000b68:	2107      	movs	r1, #7
 8000b6a:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <initRGB_LED_PWM+0x20c>)
 8000b6c:	f000 f8d6 	bl	8000d1c <Nucleo_SetPinGPIO>
  Nucleo_SetAFGPIO(RGB_GREEN, 2); // AF02 odpovida TIM3_CH2
 8000b70:	2202      	movs	r2, #2
 8000b72:	2107      	movs	r1, #7
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <initRGB_LED_PWM+0x20c>)
 8000b76:	f000 f880 	bl	8000c7a <Nucleo_SetAFGPIO>
  TIM3->CCMR1 &= ~TIM_CCMR1_OC2M;
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000b84:	6193      	str	r3, [r2, #24]
  TIM3->CCMR1 |= TIM_CCMR1_OC2M; //TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; // 110 - PWM 1
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000b90:	6193      	str	r3, [r2, #24]
  TIM3->CCER |= TIM_CCER_CC2E; // povol vystup
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6213      	str	r3, [r2, #32]
  TIM3->CCR2 = 0; //TIM1->ARR / 2;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <initRGB_LED_PWM+0x204>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	639a      	str	r2, [r3, #56]	; 0x38
  // -------------------------------------------------------
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	f3af 8000 	nop.w
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	412e8480 	.word	0x412e8480
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40010000 	.word	0x40010000
 8000bc4:	3ff00000 	.word	0x3ff00000
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40000400 	.word	0x40000400
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800

08000bd8 <set_RGB_LED_PWM>:

void set_RGB_LED_PWM(uint32_t red_PWM, uint32_t green_PWM, uint32_t blue_PWM)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  if (red_PWM > 255)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2bff      	cmp	r3, #255	; 0xff
 8000be8:	d901      	bls.n	8000bee <set_RGB_LED_PWM+0x16>
    red_PWM = 255;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	60fb      	str	r3, [r7, #12]
  if (green_PWM > 255)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2bff      	cmp	r3, #255	; 0xff
 8000bf2:	d901      	bls.n	8000bf8 <set_RGB_LED_PWM+0x20>
      green_PWM = 255;
 8000bf4:	23ff      	movs	r3, #255	; 0xff
 8000bf6:	60bb      	str	r3, [r7, #8]
  if (blue_PWM > 255)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2bff      	cmp	r3, #255	; 0xff
 8000bfc:	d901      	bls.n	8000c02 <set_RGB_LED_PWM+0x2a>
      blue_PWM = 255;
 8000bfe:	23ff      	movs	r3, #255	; 0xff
 8000c00:	607b      	str	r3, [r7, #4]

  TIM3->CCR1 = red_PWM;
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <set_RGB_LED_PWM+0x48>)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6353      	str	r3, [r2, #52]	; 0x34
  TIM3->CCR2 = green_PWM;
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <set_RGB_LED_PWM+0x48>)
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR2 = blue_PWM;
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <set_RGB_LED_PWM+0x4c>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40000400 	.word	0x40000400
 8000c24:	40010000 	.word	0x40010000

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c2e:	e003      	b.n	8000c38 <LoopCopyDataInit>

08000c30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c36:	3104      	adds	r1, #4

08000c38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c40:	d3f6      	bcc.n	8000c30 <CopyDataInit>
  ldr  r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c44:	e002      	b.n	8000c4c <LoopFillZerobss>

08000c46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c48:	f842 3b04 	str.w	r3, [r2], #4

08000c4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c50:	d3f9      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c52:	f000 f9c5 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f000 f9f9 	bl	800104c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fea7 	bl	80009ac <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c64:	080010b4 	.word	0x080010b4
  ldr  r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c6c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000c70:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000c74:	20000020 	.word	0x20000020

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>

08000c7a <Nucleo_SetAFGPIO>:


#include "stm_core.h"

bool Nucleo_SetAFGPIO(GPIO_TypeDef *gpio, uint32_t bitnum, uint32_t afValue)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
  gpio->AFR[(bitnum < 8) ? 0 : 1] &= ~(0x0f << (4 * (bitnum & 0x07))); // vynuluj AF bity
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	bf8c      	ite	hi
 8000c8c:	2301      	movhi	r3, #1
 8000c8e:	2300      	movls	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	bf8c      	ite	hi
 8000c9a:	2301      	movhi	r3, #1
 8000c9c:	2300      	movls	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f002 0207 	and.w	r2, r2, #7
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	43d2      	mvns	r2, r2
 8000cba:	ea03 0102 	and.w	r1, r3, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f100 0208 	add.w	r2, r0, #8
 8000cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  gpio->AFR[(bitnum < 8) ? 0 : 1] |= ((afValue & 0x0f) << (4 * (bitnum & 0x07))); // nastav AF bity
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2b07      	cmp	r3, #7
 8000ccc:	bf8c      	ite	hi
 8000cce:	2301      	movhi	r3, #1
 8000cd0:	2300      	movls	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	2b07      	cmp	r3, #7
 8000cda:	bf8c      	ite	hi
 8000cdc:	2301      	movhi	r3, #1
 8000cde:	2300      	movls	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 010f 	and.w	r1, r3, #15
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	ea42 0103 	orr.w	r1, r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f100 0208 	add.w	r2, r0, #8
 8000d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  return true;
 8000d0c:	2301      	movs	r3, #1
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <Nucleo_SetPinGPIO>:

bool Nucleo_SetPinGPIO(GPIO_TypeDef *gpio, uint32_t bitnum, eIoPortModes mode)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	4613      	mov	r3, r2
 8000d28:	71fb      	strb	r3, [r7, #7]
  uint32_t enr_mask = 0;        // hodnota do xxENR registru
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  uint32_t rstr_mask = 0;       // hodnota do xxRSTR registru
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]

  switch((uint32_t)gpio)    // detekce, ktery GPIO
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4aa3      	ldr	r2, [pc, #652]	; (8000fc4 <Nucleo_SetPinGPIO+0x2a8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d01d      	beq.n	8000d76 <Nucleo_SetPinGPIO+0x5a>
 8000d3a:	4aa2      	ldr	r2, [pc, #648]	; (8000fc4 <Nucleo_SetPinGPIO+0x2a8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d806      	bhi.n	8000d4e <Nucleo_SetPinGPIO+0x32>
 8000d40:	4aa1      	ldr	r2, [pc, #644]	; (8000fc8 <Nucleo_SetPinGPIO+0x2ac>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d00d      	beq.n	8000d62 <Nucleo_SetPinGPIO+0x46>
 8000d46:	4aa1      	ldr	r2, [pc, #644]	; (8000fcc <Nucleo_SetPinGPIO+0x2b0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d00f      	beq.n	8000d6c <Nucleo_SetPinGPIO+0x50>
 8000d4c:	e027      	b.n	8000d9e <Nucleo_SetPinGPIO+0x82>
 8000d4e:	4aa0      	ldr	r2, [pc, #640]	; (8000fd0 <Nucleo_SetPinGPIO+0x2b4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d01a      	beq.n	8000d8a <Nucleo_SetPinGPIO+0x6e>
 8000d54:	4a9f      	ldr	r2, [pc, #636]	; (8000fd4 <Nucleo_SetPinGPIO+0x2b8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d01c      	beq.n	8000d94 <Nucleo_SetPinGPIO+0x78>
 8000d5a:	4a9f      	ldr	r2, [pc, #636]	; (8000fd8 <Nucleo_SetPinGPIO+0x2bc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d00f      	beq.n	8000d80 <Nucleo_SetPinGPIO+0x64>
 8000d60:	e01d      	b.n	8000d9e <Nucleo_SetPinGPIO+0x82>
  {
    case (uint32_t)GPIOA:
      enr_mask = RCC_AHB1ENR_GPIOAEN;
 8000d62:	2301      	movs	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOARST;
 8000d66:	2301      	movs	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
      break;
 8000d6a:	e018      	b.n	8000d9e <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOB:
      enr_mask = RCC_AHB1ENR_GPIOBEN;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	617b      	str	r3, [r7, #20]
      rstr_mask = RCC_AHB1RSTR_GPIOBRST;
 8000d70:	2302      	movs	r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
      break;
 8000d74:	e013      	b.n	8000d9e <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOC:
        enr_mask = RCC_AHB1ENR_GPIOCEN;
 8000d76:	2304      	movs	r3, #4
 8000d78:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOCRST;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	613b      	str	r3, [r7, #16]
        break;
 8000d7e:	e00e      	b.n	8000d9e <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOD:
        enr_mask = RCC_AHB1ENR_GPIODEN;
 8000d80:	2308      	movs	r3, #8
 8000d82:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIODRST;
 8000d84:	2308      	movs	r3, #8
 8000d86:	613b      	str	r3, [r7, #16]
        break;
 8000d88:	e009      	b.n	8000d9e <Nucleo_SetPinGPIO+0x82>
    case (uint32_t)GPIOE:
        enr_mask = RCC_AHB1ENR_GPIOEEN;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOERST;
 8000d8e:	2310      	movs	r3, #16
 8000d90:	613b      	str	r3, [r7, #16]
        break;
 8000d92:	e004      	b.n	8000d9e <Nucleo_SetPinGPIO+0x82>
        enr_mask = RCC_AHB1ENR_GPIOGEN;
        rstr_mask = RCC_AHB1RSTR_GPIOGRST;
        break;
#endif
    case (uint32_t)GPIOH:
        enr_mask = RCC_AHB1ENR_GPIOHEN;
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	617b      	str	r3, [r7, #20]
        rstr_mask = RCC_AHB1RSTR_GPIOHRST;
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	613b      	str	r3, [r7, #16]
        break;
 8000d9c:	bf00      	nop
  }

  if ((enr_mask == 0) || (rstr_mask == 0))    // nevybran GPIO
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <Nucleo_SetPinGPIO+0x8e>
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <Nucleo_SetPinGPIO+0x92>
      return false;                           // vrat priznak chyby
 8000daa:	2300      	movs	r3, #0
 8000dac:	e104      	b.n	8000fb8 <Nucleo_SetPinGPIO+0x29c>


  if (!(RCC->AHB1ENR & enr_mask))             // inicializace vybraneho
 8000dae:	4b8b      	ldr	r3, [pc, #556]	; (8000fdc <Nucleo_SetPinGPIO+0x2c0>)
 8000db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d112      	bne.n	8000de0 <Nucleo_SetPinGPIO+0xc4>
  {
    RCC->AHB1ENR |= enr_mask;                 // povolit hodiny periferie
 8000dba:	4988      	ldr	r1, [pc, #544]	; (8000fdc <Nucleo_SetPinGPIO+0x2c0>)
 8000dbc:	4b87      	ldr	r3, [pc, #540]	; (8000fdc <Nucleo_SetPinGPIO+0x2c0>)
 8000dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	630b      	str	r3, [r1, #48]	; 0x30
    RCC->AHB1RSTR |= rstr_mask;               // proved reset periferie
 8000dc6:	4985      	ldr	r1, [pc, #532]	; (8000fdc <Nucleo_SetPinGPIO+0x2c0>)
 8000dc8:	4b84      	ldr	r3, [pc, #528]	; (8000fdc <Nucleo_SetPinGPIO+0x2c0>)
 8000dca:	691a      	ldr	r2, [r3, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	610b      	str	r3, [r1, #16]
    RCC->AHB1RSTR &= ~rstr_mask;              // a konec resetu
 8000dd2:	4982      	ldr	r1, [pc, #520]	; (8000fdc <Nucleo_SetPinGPIO+0x2c0>)
 8000dd4:	4b81      	ldr	r3, [pc, #516]	; (8000fdc <Nucleo_SetPinGPIO+0x2c0>)
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	610b      	str	r3, [r1, #16]
  }

  // nastaveni konfiguracnich bitu do defaultniho stavu (nemususelo byt od drive)
  gpio->MODER &= ~(0x03 << (2 * bitnum));   // vynuluj prislusne 2 bity v registru
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	0052      	lsls	r2, r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	fa01 f202 	lsl.w	r2, r1, r2
 8000dee:	43d2      	mvns	r2, r2
 8000df0:	401a      	ands	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	601a      	str	r2, [r3, #0]
  gpio->PUPDR &= ~(0x03 << (2 * bitnum));   // vynuluj prislusne 2 bity v registru
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	0052      	lsls	r2, r2, #1
 8000dfe:	2103      	movs	r1, #3
 8000e00:	fa01 f202 	lsl.w	r2, r1, r2
 8000e04:	43d2      	mvns	r2, r2
 8000e06:	401a      	ands	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	60da      	str	r2, [r3, #12]
  gpio->OSPEEDR &= ~(0x03 << (2 * bitnum)); // vynuluj prislusne 2 bity v registru
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	0052      	lsls	r2, r2, #1
 8000e14:	2103      	movs	r1, #3
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	43d2      	mvns	r2, r2
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	609a      	str	r2, [r3, #8]

  // nastaveni registru podle typu vystupu/vstupu
  switch(mode)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b07      	cmp	r3, #7
 8000e26:	f200 80c4 	bhi.w	8000fb2 <Nucleo_SetPinGPIO+0x296>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <Nucleo_SetPinGPIO+0x114>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e51 	.word	0x08000e51
 8000e34:	08000e51 	.word	0x08000e51
 8000e38:	08000f2f 	.word	0x08000f2f
 8000e3c:	08000f17 	.word	0x08000f17
 8000e40:	08000ebf 	.word	0x08000ebf
 8000e44:	08000eeb 	.word	0x08000eeb
 8000e48:	08000f45 	.word	0x08000f45
 8000e4c:	08000f45 	.word	0x08000f45
  {
    case ioPortOutputOC:
    case ioPortOutputPP:
      gpio->MODER |= 0x01 << (2 * bitnum);    // 01 = output
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	0052      	lsls	r2, r2, #1
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	601a      	str	r2, [r3, #0]
      gpio->OSPEEDR |= 0x03 << (2 * bitnum);  // 11 = high speed
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	0052      	lsls	r2, r2, #1
 8000e6c:	2103      	movs	r1, #3
 8000e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e72:	431a      	orrs	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	609a      	str	r2, [r3, #8]
      gpio->PUPDR &=  ~(0x03 << (2 * bitnum));  // 00 = no pu/pd
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	0052      	lsls	r2, r2, #1
 8000e80:	2103      	movs	r1, #3
 8000e82:	fa01 f202 	lsl.w	r2, r1, r2
 8000e86:	43d2      	mvns	r2, r2
 8000e88:	401a      	ands	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	60da      	str	r2, [r3, #12]

      if (mode == ioPortOutputOC)   // open collector (drain) ?
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d109      	bne.n	8000ea8 <Nucleo_SetPinGPIO+0x18c>
        gpio->OTYPER |= 0x01 << bitnum;   // 1 = OC/Open drain
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	605a      	str	r2, [r3, #4]
      else
        gpio->OTYPER &= ~(0x01 << bitnum);// 0 = push-pull
      break;
 8000ea6:	e086      	b.n	8000fb6 <Nucleo_SetPinGPIO+0x29a>
        gpio->OTYPER &= ~(0x01 << bitnum);// 0 = push-pull
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2101      	movs	r1, #1
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb4:	43d2      	mvns	r2, r2
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	605a      	str	r2, [r3, #4]
      break;
 8000ebc:	e07b      	b.n	8000fb6 <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputPU:                  // moder bits 00 = input
       gpio->PUPDR &= ~(0x03 << (2 * bitnum));  // clear bits
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	0052      	lsls	r2, r2, #1
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	43d2      	mvns	r2, r2
 8000ece:	401a      	ands	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	60da      	str	r2, [r3, #12]
       gpio->PUPDR |= 0x01 << (2 * bitnum);     // 01 = pull-up
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	0052      	lsls	r2, r2, #1
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	60da      	str	r2, [r3, #12]
       break;
 8000ee8:	e065      	b.n	8000fb6 <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputPD:
       gpio->PUPDR &= ~(0x03 << (2 * bitnum));  // clear bits
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	0052      	lsls	r2, r2, #1
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef8:	43d2      	mvns	r2, r2
 8000efa:	401a      	ands	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	60da      	str	r2, [r3, #12]
       gpio->PUPDR |= 0x02 << (2 * bitnum);     // 10 = pull-up
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	0052      	lsls	r2, r2, #1
 8000f08:	2102      	movs	r1, #2
 8000f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	60da      	str	r2, [r3, #12]
       break;
 8000f14:	e04f      	b.n	8000fb6 <Nucleo_SetPinGPIO+0x29a>
     case ioPortInputFloat:     // 00 = input mode, nothing to do
        gpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/dn
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	0052      	lsls	r2, r2, #1
 8000f1e:	2103      	movs	r1, #3
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	401a      	ands	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	60da      	str	r2, [r3, #12]
        break;
 8000f2c:	e043      	b.n	8000fb6 <Nucleo_SetPinGPIO+0x29a>
     case ioPortAnalog:         // 11 - analog mode
       gpio->MODER |= 0x03 << (2 * bitnum);   // set bits
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	0052      	lsls	r2, r2, #1
 8000f36:	2103      	movs	r1, #3
 8000f38:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]
       break;
 8000f42:	e038      	b.n	8000fb6 <Nucleo_SetPinGPIO+0x29a>
     case ioPortAlternatePP:
     case ioPortAlternateOC:
       gpio->MODER |= 0x02 << (2 * bitnum); // set bits
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	0052      	lsls	r2, r2, #1
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	431a      	orrs	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	601a      	str	r2, [r3, #0]

       if (mode == ioPortAlternateOC)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	d109      	bne.n	8000f72 <Nucleo_SetPinGPIO+0x256>
         gpio->OTYPER |= 0x01 << bitnum; // 1 = open-drain
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2101      	movs	r1, #1
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	e009      	b.n	8000f86 <Nucleo_SetPinGPIO+0x26a>
       else
         gpio->OTYPER &= ~(0x01 << bitnum); // 0 = push-pull
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2101      	movs	r1, #1
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7e:	43d2      	mvns	r2, r2
 8000f80:	401a      	ands	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	605a      	str	r2, [r3, #4]
	
        gpio->OSPEEDR |= 0x03 << (2 * bitnum); // high-speed = 11
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	0052      	lsls	r2, r2, #1
 8000f8e:	2103      	movs	r1, #3
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	431a      	orrs	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	609a      	str	r2, [r3, #8]
        gpio->PUPDR &= ~(0x03 << (2 * bitnum)); // 00 = no pull-up/pull-down
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	0052      	lsls	r2, r2, #1
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	60da      	str	r2, [r3, #12]
                    // don't forget set AFR registers !!!
        break;
 8000fb0:	e001      	b.n	8000fb6 <Nucleo_SetPinGPIO+0x29a>
     default:   // neznamy rezim ?
       return false; // priznak chyby
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <Nucleo_SetPinGPIO+0x29c>
  }

  return true;  // priznak OK
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021c00 	.word	0x40021c00
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4a16      	ldr	r2, [pc, #88]	; (8001040 <SystemInit+0x60>)
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <SystemInit+0x60>)
 8000fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ff4:	4a13      	ldr	r2, [pc, #76]	; (8001044 <SystemInit+0x64>)
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <SystemInit+0x64>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <SystemInit+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <SystemInit+0x64>)
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <SystemInit+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <SystemInit+0x64>)
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SystemInit+0x68>)
 800101a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800101c:	4a09      	ldr	r2, [pc, #36]	; (8001044 <SystemInit+0x64>)
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <SystemInit+0x64>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001026:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SystemInit+0x60>)
 8001030:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001034:	609a      	str	r2, [r3, #8]
#endif
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	40023800 	.word	0x40023800
 8001048:	24003010 	.word	0x24003010

0800104c <__libc_init_array>:
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	4e0d      	ldr	r6, [pc, #52]	; (8001084 <__libc_init_array+0x38>)
 8001050:	4c0d      	ldr	r4, [pc, #52]	; (8001088 <__libc_init_array+0x3c>)
 8001052:	1ba4      	subs	r4, r4, r6
 8001054:	10a4      	asrs	r4, r4, #2
 8001056:	2500      	movs	r5, #0
 8001058:	42a5      	cmp	r5, r4
 800105a:	d109      	bne.n	8001070 <__libc_init_array+0x24>
 800105c:	4e0b      	ldr	r6, [pc, #44]	; (800108c <__libc_init_array+0x40>)
 800105e:	4c0c      	ldr	r4, [pc, #48]	; (8001090 <__libc_init_array+0x44>)
 8001060:	f000 f818 	bl	8001094 <_init>
 8001064:	1ba4      	subs	r4, r4, r6
 8001066:	10a4      	asrs	r4, r4, #2
 8001068:	2500      	movs	r5, #0
 800106a:	42a5      	cmp	r5, r4
 800106c:	d105      	bne.n	800107a <__libc_init_array+0x2e>
 800106e:	bd70      	pop	{r4, r5, r6, pc}
 8001070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001074:	4798      	blx	r3
 8001076:	3501      	adds	r5, #1
 8001078:	e7ee      	b.n	8001058 <__libc_init_array+0xc>
 800107a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800107e:	4798      	blx	r3
 8001080:	3501      	adds	r5, #1
 8001082:	e7f2      	b.n	800106a <__libc_init_array+0x1e>
 8001084:	080010ac 	.word	0x080010ac
 8001088:	080010ac 	.word	0x080010ac
 800108c:	080010ac 	.word	0x080010ac
 8001090:	080010b0 	.word	0x080010b0

08001094 <_init>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	bf00      	nop
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr

080010a0 <_fini>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	bf00      	nop
 80010a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a6:	bc08      	pop	{r3}
 80010a8:	469e      	mov	lr, r3
 80010aa:	4770      	bx	lr
